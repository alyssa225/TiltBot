[0.000000] (-) TimerEvent: {}
[0.000218] (turtle_brick) JobQueued: {'identifier': 'turtle_brick', 'dependencies': OrderedDict([('turtle_brick', '/home/alyssa/homework2-alyssa225/install/turtle_brick')])}
[0.000294] (turtle_brick_interfaces) JobQueued: {'identifier': 'turtle_brick_interfaces', 'dependencies': OrderedDict([('turtle_brick_interfaces', '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces')])}
[0.000334] (turtle_brick) JobStarted: {'identifier': 'turtle_brick'}
[0.009219] (turtle_brick_interfaces) JobStarted: {'identifier': 'turtle_brick_interfaces'}
[0.098946] (-) TimerEvent: {}
[0.199248] (-) TimerEvent: {}
[0.243406] (turtle_brick) Command: {'cmd': ['/usr/bin/python3', '-m', 'pytest'], 'cwd': '/home/alyssa/homework2-alyssa225/src/turtle_brick', 'env': {'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'alyssa', 'XDG_SESSION_TYPE': 'wayland', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces/lib:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib', 'HOME': '/home/alyssa', 'OLDPWD': '/home/alyssa/homework2-alyssa225/src', 'DESKTOP_SESSION': 'ubuntu', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'SYSTEMD_EXEC_PID': '418763', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'IM_CONFIG_PHASE': '1', 'WAYLAND_DISPLAY': 'wayland-0', 'COLCON_PREFIX_PATH': '/home/alyssa/homework2-alyssa225/install', 'ROS_DISTRO': 'humble', 'LOGNAME': 'alyssa', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 'alyssa', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'ROS_LOCALHOST_ONLY': '0', 'PATH': '/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/alyssa-Galago-Pro:@/tmp/.ICE-unix/1005,unix/alyssa-Galago-Pro:/tmp/.ICE-unix/1005', 'XDG_MENU_PREFIX': 'gnome-', 'GNOME_TERMINAL_SCREEN': '/org/gnome/Terminal/screen/6d4b914e_9fd7_45b5_b317_afa2fd1ab6a4', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1000', 'DISPLAY': ':0', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1000/.mutter-Xwaylandauth.BJT0T1', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'GNOME_TERMINAL_SERVICE': ':1.10137', 'SSH_AGENT_LAUNCHER': 'gnome-keyring', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'AMENT_PREFIX_PATH': '/home/alyssa/homework2-alyssa225/install/turtle_brick:/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces:/opt/ros/humble', 'SHELL': '/bin/bash', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'QT_IM_MODULE': 'ibus', 'PWD': '/home/alyssa/homework2-alyssa225/build/turtle_brick', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/etc/xdg', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/alyssa/homework2-alyssa225/install/turtle_brick/lib/python3.10/site-packages:/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages', 'COLCON': '1', 'VTE_VERSION': '6800', 'CMAKE_PREFIX_PATH': '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces:/home/alyssa/homework2-alyssa225/install/turtle_brick_interface', 'PYTEST_ADDOPTS': '--tb=short --junit-xml=/home/alyssa/homework2-alyssa225/build/turtle_brick/pytest.xml --junit-prefix=turtle_brick -o cache_dir=/home/alyssa/homework2-alyssa225/build/turtle_brick/.pytest_cache'}, 'shell': False}
[0.256967] (turtle_brick_interfaces) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'alyssa'), ('XDG_SESSION_TYPE', 'wayland'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces/lib:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/alyssa'), ('OLDPWD', '/home/alyssa/homework2-alyssa225/src'), ('DESKTOP_SESSION', 'ubuntu'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('SYSTEMD_EXEC_PID', '418763'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('IM_CONFIG_PHASE', '1'), ('WAYLAND_DISPLAY', 'wayland-0'), ('COLCON_PREFIX_PATH', '/home/alyssa/homework2-alyssa225/install'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'alyssa'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'alyssa'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/alyssa-Galago-Pro:@/tmp/.ICE-unix/1005,unix/alyssa-Galago-Pro:/tmp/.ICE-unix/1005'), ('XDG_MENU_PREFIX', 'gnome-'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/6d4b914e_9fd7_45b5_b317_afa2fd1ab6a4'), ('GNOME_SETUP_DISPLAY', ':1'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/.mutter-Xwaylandauth.BJT0T1'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.10137'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces:/home/alyssa/homework2-alyssa225/install/turtle_brick:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces/local/lib/python3.10/dist-packages:/home/alyssa/homework2-alyssa225/install/turtle_brick/lib/python3.10/site-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces:/home/alyssa/homework2-alyssa225/install/turtle_brick_interface')]), 'shell': False}
[0.263619] (turtle_brick_interfaces) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/CTestConfiguration.ini\n'}
[0.263893] (turtle_brick_interfaces) StdoutLine: {'line': b'Parse Config file:/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/CTestConfiguration.ini\n'}
[0.264145] (turtle_brick_interfaces) StdoutLine: {'line': b'   Site: alyssa-Galago-Pro\n'}
[0.264386] (turtle_brick_interfaces) StdoutLine: {'line': b'   Build name: (empty)\n'}
[0.264552] (turtle_brick_interfaces) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[0.264682] (turtle_brick_interfaces) StdoutLine: {'line': b'Create new tag: 20221020-1950 - Experimental\n'}
[0.264920] (turtle_brick_interfaces) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/CTestConfiguration.ini\n'}
[0.265207] (turtle_brick_interfaces) StdoutLine: {'line': b'Parse Config file:/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/CTestConfiguration.ini\n'}
[0.265355] (turtle_brick_interfaces) StdoutLine: {'line': b'Test project /home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces\n'}
[0.265467] (turtle_brick_interfaces) StdoutLine: {'line': b'Constructing a list of tests\n'}
[0.265641] (turtle_brick_interfaces) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[0.265810] (turtle_brick_interfaces) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[0.266008] (turtle_brick_interfaces) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[0.266162] (turtle_brick_interfaces) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[0.266299] (turtle_brick_interfaces) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[0.266441] (turtle_brick_interfaces) StdoutLine: {'line': b'test 1\n'}
[0.266573] (turtle_brick_interfaces) StdoutLine: {'line': b'    Start 1: lint_cmake\n'}
[0.266702] (turtle_brick_interfaces) StdoutLine: {'line': b'\n'}
[0.266832] (turtle_brick_interfaces) StdoutLine: {'line': b'1: Test command: /usr/bin/python3.10 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/lint_cmake.xunit.xml" "--package-name" "turtle_brick_interfaces" "--output-file" "/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/humble/bin/ament_lint_cmake" "--xunit-file" "/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/lint_cmake.xunit.xml"\n'}
[0.266982] (turtle_brick_interfaces) StdoutLine: {'line': b'1: Test timeout computed to be: 60\n'}
[0.299344] (-) TimerEvent: {}
[0.319700] (turtle_brick_interfaces) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/alyssa/homework2-alyssa225/src/turtle_brick_interfaces':\n"}
[0.319963] (turtle_brick_interfaces) StdoutLine: {'line': b'1:  - /opt/ros/humble/bin/ament_lint_cmake --xunit-file /home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/lint_cmake.xunit.xml\n'}
[0.382669] (turtle_brick_interfaces) StdoutLine: {'line': b'1: CMakeLists.txt:15: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.382972] (turtle_brick_interfaces) StdoutLine: {'line': b'1: \n'}
[0.383172] (turtle_brick_interfaces) StdoutLine: {'line': b'1: \n'}
[0.383320] (turtle_brick_interfaces) StdoutLine: {'line': b'1: 1 errors\n'}
[0.392620] (turtle_brick_interfaces) StdoutLine: {'line': b'1: -- run_test.py: return code 1\n'}
[0.392964] (turtle_brick_interfaces) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/lint_cmake.xunit.xml'\n"}
[0.399441] (-) TimerEvent: {}
[0.400591] (turtle_brick_interfaces) StdoutLine: {'line': b'1/2 Test #1: lint_cmake .......................***Failed    0.14 sec\n'}
[0.400899] (turtle_brick_interfaces) StdoutLine: {'line': b'test 2\n'}
[0.401016] (turtle_brick_interfaces) StdoutLine: {'line': b'    Start 2: xmllint\n'}
[0.401183] (turtle_brick_interfaces) StdoutLine: {'line': b'\n'}
[0.401326] (turtle_brick_interfaces) StdoutLine: {'line': b'2: Test command: /usr/bin/python3.10 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/xmllint.xunit.xml" "--package-name" "turtle_brick_interfaces" "--output-file" "/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/ament_xmllint/xmllint.txt" "--command" "/opt/ros/humble/bin/ament_xmllint" "--xunit-file" "/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/xmllint.xunit.xml"\n'}
[0.401491] (turtle_brick_interfaces) StdoutLine: {'line': b'2: Test timeout computed to be: 60\n'}
[0.455367] (turtle_brick_interfaces) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/alyssa/homework2-alyssa225/src/turtle_brick_interfaces':\n"}
[0.455658] (turtle_brick_interfaces) StdoutLine: {'line': b'2:  - /opt/ros/humble/bin/ament_xmllint --xunit-file /home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/xmllint.xunit.xml\n'}
[0.499540] (-) TimerEvent: {}
[0.542180] (turtle_brick) StdoutLine: {'line': b'\x1b[1m============================= test session starts ==============================\x1b[0m\n'}
[0.542476] (turtle_brick) StdoutLine: {'line': b'platform linux -- Python 3.10.6, pytest-6.2.5, py-1.10.0, pluggy-0.13.0\n'}
[0.547708] (turtle_brick) StdoutLine: {'line': b'cachedir: /home/alyssa/homework2-alyssa225/build/turtle_brick/.pytest_cache\n'}
[0.547962] (turtle_brick) StdoutLine: {'line': b'rootdir: /home/alyssa/homework2-alyssa225/src/turtle_brick\n'}
[0.548181] (turtle_brick) StdoutLine: {'line': b'plugins: ament-lint-0.12.4, ament-xmllint-0.12.4, launch-testing-ros-0.19.3, launch-testing-1.0.2, ament-flake8-0.12.4, ament-pep257-0.12.4, ament-copyright-0.12.4, colcon-core-0.10.0, cov-3.0.0\n'}
[0.599664] (-) TimerEvent: {}
[0.615783] (turtle_brick) StdoutLine: {'line': b'\x1b[1mcollecting ... \x1b[0m\x1b[1m\n'}
[0.616025] (turtle_brick) StdoutLine: {'line': b'collected 4 items                                                              \x1b[0m\n'}
[0.616225] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.623661] (turtle_brick) StdoutLine: {'line': b'test/math_test.py \x1b[32m.\x1b[0m\x1b[32m                                                      [ 25%]\x1b[0m\n'}
[0.624790] (turtle_brick) StdoutLine: {'line': b'test/test_copyright.py \x1b[33ms\x1b[0m\x1b[32m                                                 [ 50%]\x1b[0m\n'}
[0.658120] (turtle_brick_interfaces) StdoutLine: {'line': b"2: File 'package.xml' is valid\n"}
[0.658352] (turtle_brick_interfaces) StdoutLine: {'line': b'2: \n'}
[0.658497] (turtle_brick_interfaces) StdoutLine: {'line': b'2: No problems found\n'}
[0.667946] (turtle_brick_interfaces) StdoutLine: {'line': b'2: -- run_test.py: return code 0\n'}
[0.668191] (turtle_brick_interfaces) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/xmllint.xunit.xml'\n"}
[0.677834] (turtle_brick_interfaces) StdoutLine: {'line': b'2/2 Test #2: xmllint ..........................   Passed    0.28 sec\n'}
[0.678299] (turtle_brick_interfaces) StdoutLine: {'line': b'\n'}
[0.678501] (turtle_brick_interfaces) StdoutLine: {'line': b'50% tests passed\x1b[0;0m, \x1b[0;31m1 tests failed\x1b[0;0m out of 2\n'}
[0.678637] (turtle_brick_interfaces) StdoutLine: {'line': b'\n'}
[0.678808] (turtle_brick_interfaces) StdoutLine: {'line': b'Label Time Summary:\n'}
[0.678965] (turtle_brick_interfaces) StdoutLine: {'line': b'lint_cmake    =   0.14 sec*proc (1 test)\n'}
[0.679171] (turtle_brick_interfaces) StdoutLine: {'line': b'linter        =   0.41 sec*proc (2 tests)\n'}
[0.679299] (turtle_brick_interfaces) StdoutLine: {'line': b'xmllint       =   0.28 sec*proc (1 test)\n'}
[0.679425] (turtle_brick_interfaces) StdoutLine: {'line': b'\n'}
[0.679552] (turtle_brick_interfaces) StdoutLine: {'line': b'Total Test time (real) =   0.41 sec\n'}
[0.679678] (turtle_brick_interfaces) StdoutLine: {'line': b'\n'}
[0.679833] (turtle_brick_interfaces) StdoutLine: {'line': b'The following tests FAILED:\n'}
[0.679982] (turtle_brick_interfaces) StdoutLine: {'line': b'\t\x1b[0;31m  1 - lint_cmake (Failed)\x1b[0;0m\n'}
[0.698340] (turtle_brick_interfaces) StderrLine: {'line': b'Errors while running CTest\n'}
[0.698634] (turtle_brick_interfaces) StderrLine: {'line': b'Output from these tests are in: /home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/Testing/Temporary/LastTest.log\n'}
[0.698959] (turtle_brick_interfaces) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[0.699744] (-) TimerEvent: {}
[0.709312] (turtle_brick_interfaces) CommandEnded: {'returncode': 8}
[0.710003] (turtle_brick_interfaces) TestFailure: {'identifier': 'turtle_brick_interfaces'}
[0.710089] (turtle_brick_interfaces) JobEnded: {'identifier': 'turtle_brick_interfaces', 'rc': 0}
[0.799866] (-) TimerEvent: {}
[0.830256] (turtle_brick) StdoutLine: {'line': b'test/test_flake8.py \x1b[31mF\x1b[0m\x1b[31m                                                    [ 75%]\x1b[0m\n'}
[0.895268] (turtle_brick) StdoutLine: {'line': b'test/test_pep257.py \x1b[31mF\x1b[0m\x1b[31m                                                    [100%]\x1b[0m\n'}
[0.895499] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.895705] (turtle_brick) StdoutLine: {'line': b'=================================== FAILURES ===================================\n'}
[0.895896] (turtle_brick) StdoutLine: {'line': b'\x1b[31m\x1b[1m_________________________________ test_flake8 __________________________________\x1b[0m\n'}
[0.896046] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mtest/test_flake8.py\x1b[0m:23: in test_flake8\n'}
[0.899975] (-) TimerEvent: {}
[0.929771] (turtle_brick) StdoutLine: {'line': b'    \x1b[94massert\x1b[39;49;00m rc == \x1b[94m0\x1b[39;49;00m, \\\n'}
[0.930305] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   AssertionError: Found 138 code style errors / warnings:\x1b[0m\n'}
[0.930623] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:15:75: W291 trailing whitespace\x1b[0m\n'}
[0.930869] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:16:68: W291 trailing whitespace\x1b[0m\n'}
[0.931117] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:18:46: W291 trailing whitespace\x1b[0m\n'}
[0.931347] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:19:45: W291 trailing whitespace\x1b[0m\n'}
[0.931581] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:21:47: W291 trailing whitespace\x1b[0m\n'}
[0.932809] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:25:46: W291 trailing whitespace\x1b[0m\n'}
[0.934244] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:27:48: W291 trailing whitespace\x1b[0m\n'}
[0.936034] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:28:83: W291 trailing whitespace\x1b[0m\n'}
[0.936114] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:31:56: W291 trailing whitespace\x1b[0m\n'}
[0.936187] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:36:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.936256] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:37:33: W291 trailing whitespace\x1b[0m\n'}
[0.936339] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:59:53: W291 trailing whitespace\x1b[0m\n'}
[0.936406] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:70:20: W291 trailing whitespace\x1b[0m\n'}
[0.936472] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:71:28: W291 trailing whitespace\x1b[0m\n'}
[0.936538] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:110:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.936603] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:112:100: E501 line too long (123 > 99 characters)\x1b[0m\n'}
[0.936668] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:112:122: E202 whitespace before ')'\x1b[0m\n"}
[0.936734] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:156:68: W291 trailing whitespace\x1b[0m\n'}
[0.936799] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:157:68: W291 trailing whitespace\x1b[0m\n'}
[0.936864] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:160:56: W291 trailing whitespace\x1b[0m\n'}
[0.937118] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:180:80: E202 whitespace before ')'\x1b[0m\n"}
[0.937197] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:186:60: W291 trailing whitespace\x1b[0m\n'}
[0.937268] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:196:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[0.937338] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:198:16: E225 missing whitespace around operator\x1b[0m\n'}
[0.937407] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:200:19: W291 trailing whitespace\x1b[0m\n'}
[0.937475] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:2:1: F401 'cmath.sqrt' imported but unused\x1b[0m\n"}
[0.937543] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:6:1: F401 'tf2_ros.static_transform_broadcaster.StaticTransformBroadcaster' imported but unused\x1b[0m\n"}
[0.937611] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:7:1: F401 'tf2_ros.TransformBroadcaster' imported but unused\x1b[0m\n"}
[0.937688] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:8:1: F401 'geometry_msgs.msg.TransformStamped' imported but unused\x1b[0m\n"}
[0.937757] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:9:1: F401 'turtle_brick_interfaces.srv.Place' imported but unused\x1b[0m\n"}
[0.937825] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:9:1: F401 'turtle_brick_interfaces.srv.Drop' imported but unused\x1b[0m\n"}
[0.937906] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:11:42: W291 trailing whitespace\x1b[0m\n'}
[0.937976] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:12:12: W291 trailing whitespace\x1b[0m\n'}
[0.938045] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:14:1: F401 '.quaternion.angle_axis_to_quaternion' imported but unused\x1b[0m\n"}
[0.938188] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:17:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[0.938309] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:25:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[0.938386] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:28:69: W291 trailing whitespace\x1b[0m\n'}
[0.938457] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:34:82: W291 trailing whitespace\x1b[0m\n'}
[0.938526] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:44:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.938595] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:45:33: W291 trailing whitespace\x1b[0m\n'}
[0.938662] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:50:32: E231 missing whitespace after ','\x1b[0m\n"}
[0.938730] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:51:27: E231 missing whitespace after ','\x1b[0m\n"}
[0.938799] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:58:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.938867] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:61:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.938935] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:63:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.939003] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:64:55: E231 missing whitespace after ','\x1b[0m\n"}
[0.939071] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:64:64: E231 missing whitespace after ','\x1b[0m\n"}
[0.939140] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:64:84: E231 missing whitespace after ','\x1b[0m\n"}
[0.939208] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:65:57: E231 missing whitespace after ','\x1b[0m\n"}
[0.939293] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:65:85: E231 missing whitespace after ','\x1b[0m\n"}
[0.939359] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:66:55: E231 missing whitespace after ','\x1b[0m\n"}
[0.939424] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:66:85: E231 missing whitespace after ','\x1b[0m\n"}
[0.939488] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:67:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.939552] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:68:22: E225 missing whitespace around operator\x1b[0m\n'}
[0.939615] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:68:57: E231 missing whitespace after ','\x1b[0m\n"}
[0.939689] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:68:70: E231 missing whitespace after ','\x1b[0m\n"}
[0.939753] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:69:22: E225 missing whitespace around operator\x1b[0m\n'}
[0.939817] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:69:50: E231 missing whitespace after ','\x1b[0m\n"}
[0.939881] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:69:58: E231 missing whitespace after ','\x1b[0m\n"}
[0.939945] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:70:55: E231 missing whitespace after ','\x1b[0m\n"}
[0.940009] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:70:65: E231 missing whitespace after ','\x1b[0m\n"}
[0.940078] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:71:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.940143] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:73:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.940207] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:74:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.940271] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:97:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.940357] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:98:5: E303 too many blank lines (3)\x1b[0m\n'}
[0.940423] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:98:28: E231 missing whitespace after ','\x1b[0m\n"}
[0.940486] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:102:100: E501 line too long (100 > 99 characters)\x1b[0m\n'}
[0.940550] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:108:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.940614] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:109:28: E231 missing whitespace after ','\x1b[0m\n"}
[0.940677] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:119:5: E303 too many blank lines (2)\x1b[0m\n'}
[0.940741] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:119:27: E231 missing whitespace after ','\x1b[0m\n"}
[0.940804] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:124:40: E225 missing whitespace around operator\x1b[0m\n'}
[0.940867] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:126:13: E265 block comment should start with '# '\x1b[0m\n"}
[0.940930] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:126:100: E501 line too long (142 > 99 characters)\x1b[0m\n'}
[0.940993] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:127:100: E501 line too long (155 > 99 characters)\x1b[0m\n'}
[0.941056] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:128:28: E225 missing whitespace around operator\x1b[0m\n'}
[0.941132] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:128:39: E261 at least two spaces before inline comment\x1b[0m\n'}
[0.941201] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:128:40: E262 inline comment should start with '# '\x1b[0m\n"}
[0.941265] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:128:100: E501 line too long (106 > 99 characters)\x1b[0m\n'}
[0.941329] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:138:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.941393] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:139:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.941462] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:140:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.941526] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:143:1: E303 too many blank lines (6)\x1b[0m\n'}
[0.941605] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:147:21: W292 no newline at end of file\x1b[0m\n'}
[0.941671] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./test/math_test.py:4:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.941738] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./test/math_test.py:4:9: W292 no newline at end of file\x1b[0m\n'}
[0.941806] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:1:1: F401 'ament_copyright.main.main' imported but unused\x1b[0m\n"}
[0.941887] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:2:1: F401 'pytest' imported but unused\x1b[0m\n"}
[0.941955] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:3:1: F401 'launch' imported but unused\x1b[0m\n"}
[0.942023] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:4:1: F401 'launch_pytest' imported but unused\x1b[0m\n"}
[0.942103] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:5:1: F401 'sys' imported but unused\x1b[0m\n"}
[0.942169] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:6:1: F401 'launch_ros' imported but unused\x1b[0m\n"}
[0.942234] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:7:1: F401 'pathlib.Path' imported but unused\x1b[0m\n"}
[0.942300] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:8:1: E265 block comment should start with '# '\x1b[0m\n"}
[0.942366] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./test/brick.test.py:8:100: E501 line too long (128 > 99 characters)\x1b[0m\n'}
[0.942434] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./test/brick.test.py:21:9: W292 no newline at end of file\x1b[0m\n'}
[0.942500] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:1:1: F401 'ament_index_python.packages.get_package_share_path' imported but unused\x1b[0m\n"}
[0.942569] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:1:63: E231 missing whitespace after ','\x1b[0m\n"}
[0.942722] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:5:1: F401 'launch.conditions.UnlessCondition' imported but unused\x1b[0m\n"}
[0.942861] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:12:90: W291 trailing whitespace\x1b[0m\n'}
[0.943006] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:15:14: W291 trailing whitespace\x1b[0m\n'}
[0.943150] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:23:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[0.943308] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:24:22: E225 missing whitespace around operator\x1b[0m\n'}
[0.943478] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:26:51: E225 missing whitespace around operator\x1b[0m\n'}
[0.943610] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:27:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.943742] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:28:5: F841 local variable 'use_sim_time' is assigned to but never used\x1b[0m\n"}
[0.943874] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:30:100: E501 line too long (115 > 99 characters)\x1b[0m\n'}
[0.944013] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:30:105: E231 missing whitespace after ','\x1b[0m\n"}
[0.944180] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:31:37: E128 continuation line under-indented for visual indent\x1b[0m\n'}
[0.944328] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:31:92: E261 at least two spaces before inline comment\x1b[0m\n'}
[0.944469] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:31:92: E262 inline comment should start with '# '\x1b[0m\n"}
[0.944607] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:34:100: E501 line too long (100 > 99 characters)\x1b[0m\n'}
[0.944746] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:48:89: E231 missing whitespace after ','\x1b[0m\n"}
[0.944920] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:48:96: E231 missing whitespace after ','\x1b[0m\n"}
[0.945057] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:55:56: E231 missing whitespace after ','\x1b[0m\n"}
[0.945194] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:61:56: E231 missing whitespace after ','\x1b[0m\n"}
[0.945331] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:80:7: W292 no newline at end of file\x1b[0m\n'}
[0.945468] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:2:1: F401 'ament_index_python.packages.get_package_share_path' imported but unused\x1b[0m\n"}
[0.945605] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:5:1: F401 'launch.actions.DeclareLaunchArgument' imported but unused\x1b[0m\n"}
[0.945770] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:6:1: F401 'launch.conditions.IfCondition' imported but unused\x1b[0m\n"}
[0.945924] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:6:1: F401 'launch.conditions.UnlessCondition' imported but unused\x1b[0m\n"}
[0.946070] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:7:1: F401 'launch.substitutions.Command' imported but unused\x1b[0m\n"}
[0.946243] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:7:1: F401 'launch.substitutions.LaunchConfiguration' imported but unused\x1b[0m\n"}
[0.946371] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:10:1: F401 'launch_ros.parameter_descriptions.ParameterValue' imported but unused\x1b[0m\n"}
[0.946490] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:13:69: W291 trailing whitespace\x1b[0m\n'}
[0.946609] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:16:1: E302 expected 2 blank lines, found 0\x1b[0m\n'}
[0.946727] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:43:23: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[0.946858] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:43:25: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[0.946974] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:43:70: E231 missing whitespace after ','\x1b[0m\n"}
[0.947105] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:46:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.947226] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:47:7: W292 no newline at end of file\x1b[0m\n'}
[0.947347] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/turtle_arena.launch.py:5:27: E271 multiple spaces after keyword\x1b[0m\n'}
[0.947468] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/turtle_arena.launch.py:10:61: W291 trailing whitespace\x1b[0m\n'}
[0.947596] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/turtle_arena.launch.py:12:54: W291 trailing whitespace\x1b[0m\n'}
[0.947717] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/turtle_arena.launch.py:15:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[0.947838] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/turtle_arena.launch.py:44:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.947959] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/turtle_arena.launch.py:45:7: W292 no newline at end of file\x1b[0m\n'}
[0.948090] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   assert 1 == 0\x1b[0m\n'}
[0.948212] (turtle_brick) StdoutLine: {'line': b'----------------------------- Captured stdout call -----------------------------\n'}
[0.948350] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.948473] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:15:75: W291 trailing whitespace\n'}
[0.948602] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.948724] (turtle_brick) StdoutLine: {'line': b'    Creates the turtle_robot and controls joint and translation movements. \n'}
[0.948845] (turtle_brick) StdoutLine: {'line': b'    Additionally, places it in the world and connects to turtlesim. \n'}
[0.948967] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.949088] (turtle_brick) StdoutLine: {'line': b'        -goal_sub: subscribes to goal_sub and \n'}
[0.949209] (turtle_brick) StdoutLine: {'line': b'            recieves the positions that will \n'}
[0.949331] (turtle_brick) StdoutLine: {'line': b'            calculate movement towards goal_pose\n'}
[0.949462] (turtle_brick) StdoutLine: {'line': b'        -tilt_sub: subscribes to tilt and will \n'}
[0.949536] (turtle_brick) StdoutLine: {'line': b'            recieve the angle that the robot platform will tilt to\n'}
[0.949604] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.949670] (turtle_brick) StdoutLine: {'line': b'        -joint_state: publishes joint angles of the turtle_robot\n'}
[0.949737] (turtle_brick) StdoutLine: {'line': b'        -odom_pub: sends positions and twists  \n'}
[0.949803] (turtle_brick) StdoutLine: {'line': b'        -vel_pub: sends twist to cmd_vel\n'}
[0.949868] (turtle_brick) StdoutLine: {'line': b'        -robot_pub: sends continuous robot pose \n'}
[0.949934] (turtle_brick) StdoutLine: {'line': b'            # also just relized I could have potentially taken from odom publisher \n'}
[0.950000] (turtle_brick) StdoutLine: {'line': b'            # instead of creating a whole new object and publisher, but too late now\n'}
[0.950065] (turtle_brick) StdoutLine: {'line': b'    TRANSFORMS:\n'}
[0.950130] (turtle_brick) StdoutLine: {'line': b'        -world_odom: connects odom frame to world frame \n'}
[0.950196] (turtle_brick) StdoutLine: {'line': b'        -odom_base_link: connects base_link frame to odom frame\n'}
[0.950262] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.950327] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.950391] (turtle_brick) StdoutLine: {'line': b'                                                                  ^\n'}
[0.950456] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.950521] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:16:68: W291 trailing whitespace\n'}
[0.950586] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.950650] (turtle_brick) StdoutLine: {'line': b'    Creates the turtle_robot and controls joint and translation movements. \n'}
[0.950715] (turtle_brick) StdoutLine: {'line': b'    Additionally, places it in the world and connects to turtlesim. \n'}
[0.950779] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.950843] (turtle_brick) StdoutLine: {'line': b'        -goal_sub: subscribes to goal_sub and \n'}
[0.950909] (turtle_brick) StdoutLine: {'line': b'            recieves the positions that will \n'}
[0.950975] (turtle_brick) StdoutLine: {'line': b'            calculate movement towards goal_pose\n'}
[0.951047] (turtle_brick) StdoutLine: {'line': b'        -tilt_sub: subscribes to tilt and will \n'}
[0.951112] (turtle_brick) StdoutLine: {'line': b'            recieve the angle that the robot platform will tilt to\n'}
[0.951191] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.951257] (turtle_brick) StdoutLine: {'line': b'        -joint_state: publishes joint angles of the turtle_robot\n'}
[0.951324] (turtle_brick) StdoutLine: {'line': b'        -odom_pub: sends positions and twists  \n'}
[0.951390] (turtle_brick) StdoutLine: {'line': b'        -vel_pub: sends twist to cmd_vel\n'}
[0.951455] (turtle_brick) StdoutLine: {'line': b'        -robot_pub: sends continuous robot pose \n'}
[0.951522] (turtle_brick) StdoutLine: {'line': b'            # also just relized I could have potentially taken from odom publisher \n'}
[0.951589] (turtle_brick) StdoutLine: {'line': b'            # instead of creating a whole new object and publisher, but too late now\n'}
[0.951656] (turtle_brick) StdoutLine: {'line': b'    TRANSFORMS:\n'}
[0.951722] (turtle_brick) StdoutLine: {'line': b'        -world_odom: connects odom frame to world frame \n'}
[0.951790] (turtle_brick) StdoutLine: {'line': b'        -odom_base_link: connects base_link frame to odom frame\n'}
[0.951857] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.951924] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.951991] (turtle_brick) StdoutLine: {'line': b'                                                           ^\n'}
[0.952070] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.952133] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:18:46: W291 trailing whitespace\n'}
[0.952274] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.952422] (turtle_brick) StdoutLine: {'line': b'    Creates the turtle_robot and controls joint and translation movements. \n'}
[0.952528] (turtle_brick) StdoutLine: {'line': b'    Additionally, places it in the world and connects to turtlesim. \n'}
[0.952603] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.952669] (turtle_brick) StdoutLine: {'line': b'        -goal_sub: subscribes to goal_sub and \n'}
[0.952754] (turtle_brick) StdoutLine: {'line': b'            recieves the positions that will \n'}
[0.952822] (turtle_brick) StdoutLine: {'line': b'            calculate movement towards goal_pose\n'}
[0.952890] (turtle_brick) StdoutLine: {'line': b'        -tilt_sub: subscribes to tilt and will \n'}
[0.952956] (turtle_brick) StdoutLine: {'line': b'            recieve the angle that the robot platform will tilt to\n'}
[0.953023] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.953089] (turtle_brick) StdoutLine: {'line': b'        -joint_state: publishes joint angles of the turtle_robot\n'}
[0.953155] (turtle_brick) StdoutLine: {'line': b'        -odom_pub: sends positions and twists  \n'}
[0.953222] (turtle_brick) StdoutLine: {'line': b'        -vel_pub: sends twist to cmd_vel\n'}
[0.953287] (turtle_brick) StdoutLine: {'line': b'        -robot_pub: sends continuous robot pose \n'}
[0.953353] (turtle_brick) StdoutLine: {'line': b'            # also just relized I could have potentially taken from odom publisher \n'}
[0.953420] (turtle_brick) StdoutLine: {'line': b'            # instead of creating a whole new object and publisher, but too late now\n'}
[0.953486] (turtle_brick) StdoutLine: {'line': b'    TRANSFORMS:\n'}
[0.953568] (turtle_brick) StdoutLine: {'line': b'        -world_odom: connects odom frame to world frame \n'}
[0.953632] (turtle_brick) StdoutLine: {'line': b'        -odom_base_link: connects base_link frame to odom frame\n'}
[0.953695] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.953759] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.953822] (turtle_brick) StdoutLine: {'line': b'                                     ^\n'}
[0.953885] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.953948] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:19:45: W291 trailing whitespace\n'}
[0.954011] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.954074] (turtle_brick) StdoutLine: {'line': b'    Creates the turtle_robot and controls joint and translation movements. \n'}
[0.954206] (turtle_brick) StdoutLine: {'line': b'    Additionally, places it in the world and connects to turtlesim. \n'}
[0.954338] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.954408] (turtle_brick) StdoutLine: {'line': b'        -goal_sub: subscribes to goal_sub and \n'}
[0.954474] (turtle_brick) StdoutLine: {'line': b'            recieves the positions that will \n'}
[0.954539] (turtle_brick) StdoutLine: {'line': b'            calculate movement towards goal_pose\n'}
[0.954603] (turtle_brick) StdoutLine: {'line': b'        -tilt_sub: subscribes to tilt and will \n'}
[0.954667] (turtle_brick) StdoutLine: {'line': b'            recieve the angle that the robot platform will tilt to\n'}
[0.954730] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.954795] (turtle_brick) StdoutLine: {'line': b'        -joint_state: publishes joint angles of the turtle_robot\n'}
[0.954859] (turtle_brick) StdoutLine: {'line': b'        -odom_pub: sends positions and twists  \n'}
[0.954936] (turtle_brick) StdoutLine: {'line': b'        -vel_pub: sends twist to cmd_vel\n'}
[0.954998] (turtle_brick) StdoutLine: {'line': b'        -robot_pub: sends continuous robot pose \n'}
[0.955061] (turtle_brick) StdoutLine: {'line': b'            # also just relized I could have potentially taken from odom publisher \n'}
[0.955125] (turtle_brick) StdoutLine: {'line': b'            # instead of creating a whole new object and publisher, but too late now\n'}
[0.955281] (turtle_brick) StdoutLine: {'line': b'    TRANSFORMS:\n'}
[0.955395] (turtle_brick) StdoutLine: {'line': b'        -world_odom: connects odom frame to world frame \n'}
[0.955495] (turtle_brick) StdoutLine: {'line': b'        -odom_base_link: connects base_link frame to odom frame\n'}
[0.955616] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.955734] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.955852] (turtle_brick) StdoutLine: {'line': b'                                    ^\n'}
[0.955982] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.956096] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:21:47: W291 trailing whitespace\n'}
[0.956211] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.956322] (turtle_brick) StdoutLine: {'line': b'    Creates the turtle_robot and controls joint and translation movements. \n'}
[0.956392] (turtle_brick) StdoutLine: {'line': b'    Additionally, places it in the world and connects to turtlesim. \n'}
[0.956456] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.956521] (turtle_brick) StdoutLine: {'line': b'        -goal_sub: subscribes to goal_sub and \n'}
[0.956585] (turtle_brick) StdoutLine: {'line': b'            recieves the positions that will \n'}
[0.956648] (turtle_brick) StdoutLine: {'line': b'            calculate movement towards goal_pose\n'}
[0.956751] (turtle_brick) StdoutLine: {'line': b'        -tilt_sub: subscribes to tilt and will \n'}
[0.956819] (turtle_brick) StdoutLine: {'line': b'            recieve the angle that the robot platform will tilt to\n'}
[0.956883] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.956946] (turtle_brick) StdoutLine: {'line': b'        -joint_state: publishes joint angles of the turtle_robot\n'}
[0.957009] (turtle_brick) StdoutLine: {'line': b'        -odom_pub: sends positions and twists  \n'}
[0.957087] (turtle_brick) StdoutLine: {'line': b'        -vel_pub: sends twist to cmd_vel\n'}
[0.957153] (turtle_brick) StdoutLine: {'line': b'        -robot_pub: sends continuous robot pose \n'}
[0.957219] (turtle_brick) StdoutLine: {'line': b'            # also just relized I could have potentially taken from odom publisher \n'}
[0.957286] (turtle_brick) StdoutLine: {'line': b'            # instead of creating a whole new object and publisher, but too late now\n'}
[0.957352] (turtle_brick) StdoutLine: {'line': b'    TRANSFORMS:\n'}
[0.957418] (turtle_brick) StdoutLine: {'line': b'        -world_odom: connects odom frame to world frame \n'}
[0.957496] (turtle_brick) StdoutLine: {'line': b'        -odom_base_link: connects base_link frame to odom frame\n'}
[0.957565] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.957631] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.957695] (turtle_brick) StdoutLine: {'line': b'                                      ^\n'}
[0.957761] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.957826] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:25:46: W291 trailing whitespace\n'}
[0.957891] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.957956] (turtle_brick) StdoutLine: {'line': b'    Creates the turtle_robot and controls joint and translation movements. \n'}
[0.958023] (turtle_brick) StdoutLine: {'line': b'    Additionally, places it in the world and connects to turtlesim. \n'}
[0.958088] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.958154] (turtle_brick) StdoutLine: {'line': b'        -goal_sub: subscribes to goal_sub and \n'}
[0.958220] (turtle_brick) StdoutLine: {'line': b'            recieves the positions that will \n'}
[0.958286] (turtle_brick) StdoutLine: {'line': b'            calculate movement towards goal_pose\n'}
[0.958352] (turtle_brick) StdoutLine: {'line': b'        -tilt_sub: subscribes to tilt and will \n'}
[0.958418] (turtle_brick) StdoutLine: {'line': b'            recieve the angle that the robot platform will tilt to\n'}
[0.958482] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.958547] (turtle_brick) StdoutLine: {'line': b'        -joint_state: publishes joint angles of the turtle_robot\n'}
[0.958612] (turtle_brick) StdoutLine: {'line': b'        -odom_pub: sends positions and twists  \n'}
[0.958677] (turtle_brick) StdoutLine: {'line': b'        -vel_pub: sends twist to cmd_vel\n'}
[0.958742] (turtle_brick) StdoutLine: {'line': b'        -robot_pub: sends continuous robot pose \n'}
[0.958807] (turtle_brick) StdoutLine: {'line': b'            # also just relized I could have potentially taken from odom publisher \n'}
[0.958872] (turtle_brick) StdoutLine: {'line': b'            # instead of creating a whole new object and publisher, but too late now\n'}
[0.958937] (turtle_brick) StdoutLine: {'line': b'    TRANSFORMS:\n'}
[0.959002] (turtle_brick) StdoutLine: {'line': b'        -world_odom: connects odom frame to world frame \n'}
[0.959079] (turtle_brick) StdoutLine: {'line': b'        -odom_base_link: connects base_link frame to odom frame\n'}
[0.959144] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.959208] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.959272] (turtle_brick) StdoutLine: {'line': b'                                     ^\n'}
[0.959336] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.959400] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:27:48: W291 trailing whitespace\n'}
[0.959465] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.959529] (turtle_brick) StdoutLine: {'line': b'    Creates the turtle_robot and controls joint and translation movements. \n'}
[0.959595] (turtle_brick) StdoutLine: {'line': b'    Additionally, places it in the world and connects to turtlesim. \n'}
[0.959660] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.959724] (turtle_brick) StdoutLine: {'line': b'        -goal_sub: subscribes to goal_sub and \n'}
[0.959789] (turtle_brick) StdoutLine: {'line': b'            recieves the positions that will \n'}
[0.959853] (turtle_brick) StdoutLine: {'line': b'            calculate movement towards goal_pose\n'}
[0.959918] (turtle_brick) StdoutLine: {'line': b'        -tilt_sub: subscribes to tilt and will \n'}
[0.959989] (turtle_brick) StdoutLine: {'line': b'            recieve the angle that the robot platform will tilt to\n'}
[0.960053] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.960118] (turtle_brick) StdoutLine: {'line': b'        -joint_state: publishes joint angles of the turtle_robot\n'}
[0.960182] (turtle_brick) StdoutLine: {'line': b'        -odom_pub: sends positions and twists  \n'}
[0.960247] (turtle_brick) StdoutLine: {'line': b'        -vel_pub: sends twist to cmd_vel\n'}
[0.960341] (turtle_brick) StdoutLine: {'line': b'        -robot_pub: sends continuous robot pose \n'}
[0.960409] (turtle_brick) StdoutLine: {'line': b'            # also just relized I could have potentially taken from odom publisher \n'}
[0.960475] (turtle_brick) StdoutLine: {'line': b'            # instead of creating a whole new object and publisher, but too late now\n'}
[0.960539] (turtle_brick) StdoutLine: {'line': b'    TRANSFORMS:\n'}
[0.960602] (turtle_brick) StdoutLine: {'line': b'        -world_odom: connects odom frame to world frame \n'}
[0.960666] (turtle_brick) StdoutLine: {'line': b'        -odom_base_link: connects base_link frame to odom frame\n'}
[0.960730] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.960794] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.960858] (turtle_brick) StdoutLine: {'line': b'                                       ^\n'}
[0.960922] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.960986] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:28:83: W291 trailing whitespace\n'}
[0.961050] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.961113] (turtle_brick) StdoutLine: {'line': b'    Creates the turtle_robot and controls joint and translation movements. \n'}
[0.961177] (turtle_brick) StdoutLine: {'line': b'    Additionally, places it in the world and connects to turtlesim. \n'}
[0.961241] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.961305] (turtle_brick) StdoutLine: {'line': b'        -goal_sub: subscribes to goal_sub and \n'}
[0.961368] (turtle_brick) StdoutLine: {'line': b'            recieves the positions that will \n'}
[0.961432] (turtle_brick) StdoutLine: {'line': b'            calculate movement towards goal_pose\n'}
[0.961495] (turtle_brick) StdoutLine: {'line': b'        -tilt_sub: subscribes to tilt and will \n'}
[0.961559] (turtle_brick) StdoutLine: {'line': b'            recieve the angle that the robot platform will tilt to\n'}
[0.961623] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.961686] (turtle_brick) StdoutLine: {'line': b'        -joint_state: publishes joint angles of the turtle_robot\n'}
[0.961751] (turtle_brick) StdoutLine: {'line': b'        -odom_pub: sends positions and twists  \n'}
[0.961815] (turtle_brick) StdoutLine: {'line': b'        -vel_pub: sends twist to cmd_vel\n'}
[0.961878] (turtle_brick) StdoutLine: {'line': b'        -robot_pub: sends continuous robot pose \n'}
[0.961941] (turtle_brick) StdoutLine: {'line': b'            # also just relized I could have potentially taken from odom publisher \n'}
[0.962005] (turtle_brick) StdoutLine: {'line': b'            # instead of creating a whole new object and publisher, but too late now\n'}
[0.962081] (turtle_brick) StdoutLine: {'line': b'    TRANSFORMS:\n'}
[0.962142] (turtle_brick) StdoutLine: {'line': b'        -world_odom: connects odom frame to world frame \n'}
[0.962203] (turtle_brick) StdoutLine: {'line': b'        -odom_base_link: connects base_link frame to odom frame\n'}
[0.962344] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.962433] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.962500] (turtle_brick) StdoutLine: {'line': b'                                                                          ^\n'}
[0.962567] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.962632] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:31:56: W291 trailing whitespace\n'}
[0.962698] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.962763] (turtle_brick) StdoutLine: {'line': b'    Creates the turtle_robot and controls joint and translation movements. \n'}
[0.962829] (turtle_brick) StdoutLine: {'line': b'    Additionally, places it in the world and connects to turtlesim. \n'}
[0.962895] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.962972] (turtle_brick) StdoutLine: {'line': b'        -goal_sub: subscribes to goal_sub and \n'}
[0.963035] (turtle_brick) StdoutLine: {'line': b'            recieves the positions that will \n'}
[0.963099] (turtle_brick) StdoutLine: {'line': b'            calculate movement towards goal_pose\n'}
[0.963173] (turtle_brick) StdoutLine: {'line': b'        -tilt_sub: subscribes to tilt and will \n'}
[0.963236] (turtle_brick) StdoutLine: {'line': b'            recieve the angle that the robot platform will tilt to\n'}
[0.963300] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.963363] (turtle_brick) StdoutLine: {'line': b'        -joint_state: publishes joint angles of the turtle_robot\n'}
[0.963427] (turtle_brick) StdoutLine: {'line': b'        -odom_pub: sends positions and twists  \n'}
[0.963490] (turtle_brick) StdoutLine: {'line': b'        -vel_pub: sends twist to cmd_vel\n'}
[0.963553] (turtle_brick) StdoutLine: {'line': b'        -robot_pub: sends continuous robot pose \n'}
[0.963616] (turtle_brick) StdoutLine: {'line': b'            # also just relized I could have potentially taken from odom publisher \n'}
[0.963680] (turtle_brick) StdoutLine: {'line': b'            # instead of creating a whole new object and publisher, but too late now\n'}
[0.963743] (turtle_brick) StdoutLine: {'line': b'    TRANSFORMS:\n'}
[0.963806] (turtle_brick) StdoutLine: {'line': b'        -world_odom: connects odom frame to world frame \n'}
[0.963870] (turtle_brick) StdoutLine: {'line': b'        -odom_base_link: connects base_link frame to odom frame\n'}
[0.963933] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.963997] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.964060] (turtle_brick) StdoutLine: {'line': b'                                               ^\n'}
[0.964123] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.964187] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/turtle_robot.py:36:9: E265 block comment should start with '# '\n"}
[0.964252] (turtle_brick) StdoutLine: {'line': b'        #params\n'}
[0.964323] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.964390] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.964453] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:37:33: W291 trailing whitespace\n'}
[0.964517] (turtle_brick) StdoutLine: {'line': b'        self.declare_parameters( \n'}
[0.964581] (turtle_brick) StdoutLine: {'line': b'                                ^\n'}
[0.964644] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.964708] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:59:53: W291 trailing whitespace\n'}
[0.964771] (turtle_brick) StdoutLine: {'line': b'        # Static broadcasters publish on /tf_static.        \n'}
[0.964835] (turtle_brick) StdoutLine: {'line': b'                                                    ^\n'}
[0.964899] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.964962] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:70:20: W291 trailing whitespace\n'}
[0.965025] (turtle_brick) StdoutLine: {'line': b'        # positions \n'}
[0.965088] (turtle_brick) StdoutLine: {'line': b'                   ^\n'}
[0.965160] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.965225] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:71:28: W291 trailing whitespace\n'}
[0.965289] (turtle_brick) StdoutLine: {'line': b'        self.currentx = 0.0 \n'}
[0.965353] (turtle_brick) StdoutLine: {'line': b'                           ^\n'}
[0.965416] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.965479] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:110:1: W293 blank line contains whitespace\n'}
[0.965558] (turtle_brick) StdoutLine: {'line': b'    \n'}
[0.965622] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.965686] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.965749] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:112:100: E501 line too long (123 > 99 characters)\n'}
[0.965813] (turtle_brick) StdoutLine: {'line': b"        self.get_logger().info('goal pose: %f %f %f' % (msg.pose.position.x, msg.pose.position.y, msg.pose.orientation.z) )\n"}
[0.965878] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.965948] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.966025] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/turtle_robot.py:112:122: E202 whitespace before ')'\n"}
[0.966090] (turtle_brick) StdoutLine: {'line': b"        self.get_logger().info('goal pose: %f %f %f' % (msg.pose.position.x, msg.pose.position.y, msg.pose.orientation.z) )\n"}
[0.966157] (turtle_brick) StdoutLine: {'line': b'                                                                                                                         ^\n'}
[0.966222] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.966286] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:156:68: W291 trailing whitespace\n'}
[0.966352] (turtle_brick) StdoutLine: {'line': b'        self.odom_base_link.transform.translation.x = self.currentx \n'}
[0.966417] (turtle_brick) StdoutLine: {'line': b'                                                                   ^\n'}
[0.966482] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.966547] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:157:68: W291 trailing whitespace\n'}
[0.966612] (turtle_brick) StdoutLine: {'line': b'        self.odom_base_link.transform.translation.y = self.currenty \n'}
[0.966677] (turtle_brick) StdoutLine: {'line': b'                                                                   ^\n'}
[0.966741] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.966806] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:160:56: W291 trailing whitespace\n'}
[0.966871] (turtle_brick) StdoutLine: {'line': b'        self.joint_publisher_.publish(self.joint_state) \n'}
[0.966936] (turtle_brick) StdoutLine: {'line': b'                                                       ^\n'}
[0.967001] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.967064] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/turtle_robot.py:180:80: E202 whitespace before ')'\n"}
[0.967129] (turtle_brick) StdoutLine: {'line': b'                self.get_logger().info(\'stem angle: "%s"\' % (self.direction_ang ))\n'}
[0.967195] (turtle_brick) StdoutLine: {'line': b'                                                                               ^\n'}
[0.967259] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.967324] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:186:60: W291 trailing whitespace\n'}
[0.967389] (turtle_brick) StdoutLine: {'line': b'            if abs(self.tilt_ang - self.tilt_angf) >= 0.01:       \n'}
[0.967453] (turtle_brick) StdoutLine: {'line': b'                                                           ^\n'}
[0.967518] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.967583] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:196:1: E302 expected 2 blank lines, found 1\n'}
[0.967648] (turtle_brick) StdoutLine: {'line': b'def main(args=None):\n'}
[0.967713] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.967778] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.967842] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:198:16: E225 missing whitespace around operator\n'}
[0.967907] (turtle_brick) StdoutLine: {'line': b'    turtleRobot= Turtle_robot()\n'}
[0.967972] (turtle_brick) StdoutLine: {'line': b'               ^\n'}
[0.968036] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.968100] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:200:19: W291 trailing whitespace\n'}
[0.968165] (turtle_brick) StdoutLine: {'line': b'    rclpy.shutdown \n'}
[0.968229] (turtle_brick) StdoutLine: {'line': b'                  ^\n'}
[0.968298] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.968366] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:2:1: F401 'cmath.sqrt' imported but unused\n"}
[0.968431] (turtle_brick) StdoutLine: {'line': b'from cmath import sqrt\n'}
[0.968496] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.968560] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.968625] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:6:1: F401 'tf2_ros.static_transform_broadcaster.StaticTransformBroadcaster' imported but unused\n"}
[0.968698] (turtle_brick) StdoutLine: {'line': b'from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster\n'}
[0.968763] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.968829] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.968893] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:7:1: F401 'tf2_ros.TransformBroadcaster' imported but unused\n"}
[0.968958] (turtle_brick) StdoutLine: {'line': b'from tf2_ros import TransformBroadcaster\n'}
[0.969024] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.969089] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.969154] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:8:1: F401 'geometry_msgs.msg.TransformStamped' imported but unused\n"}
[0.969220] (turtle_brick) StdoutLine: {'line': b'from geometry_msgs.msg import TransformStamped, Pose, PoseStamped, Vector3\n'}
[0.969285] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.969350] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.969415] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:9:1: F401 'turtle_brick_interfaces.srv.Place' imported but unused\n"}
[0.969481] (turtle_brick) StdoutLine: {'line': b'from turtle_brick_interfaces.srv import Place, Drop\n'}
[0.969547] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.969618] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.969684] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:9:1: F401 'turtle_brick_interfaces.srv.Drop' imported but unused\n"}
[0.969749] (turtle_brick) StdoutLine: {'line': b'from turtle_brick_interfaces.srv import Place, Drop\n'}
[0.969814] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.969879] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.969943] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:11:42: W291 trailing whitespace\n'}
[0.970008] (turtle_brick) StdoutLine: {'line': b'from visualization_msgs.msg import Marker \n'}
[0.970074] (turtle_brick) StdoutLine: {'line': b'                                         ^\n'}
[0.970138] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.970203] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:12:12: W291 trailing whitespace\n'}
[0.970281] (turtle_brick) StdoutLine: {'line': b'import math \n'}
[0.970397] (turtle_brick) StdoutLine: {'line': b'           ^\n'}
[0.970473] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.970541] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:14:1: F401 '.quaternion.angle_axis_to_quaternion' imported but unused\n"}
[0.970616] (turtle_brick) StdoutLine: {'line': b'from .quaternion import angle_axis_to_quaternion\n'}
[0.970683] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.970748] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.970813] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:17:1: E302 expected 2 blank lines, found 1\n'}
[0.970879] (turtle_brick) StdoutLine: {'line': b'class State(Enum):\n'}
[0.970945] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.971021] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.971083] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:25:1: E302 expected 2 blank lines, found 1\n'}
[0.971146] (turtle_brick) StdoutLine: {'line': b'class Catcher(Node):\n'}
[0.971209] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.971271] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.971334] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:28:69: W291 trailing whitespace\n'}
[0.971397] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.971459] (turtle_brick) StdoutLine: {'line': b'    calculates if robot can catch placed brick in time or not\n'}
[0.971522] (turtle_brick) StdoutLine: {'line': b'    -If it can catch, robot travels to drop location, catches brick, \n'}
[0.971585] (turtle_brick) StdoutLine: {'line': b'        travels back to origin, and tilts brick off\n'}
[0.971648] (turtle_brick) StdoutLine: {'line': b'    -If the robot can\'t reach brick in time, the screen publishes "UNREACHABLE",\n'}
[0.971711] (turtle_brick) StdoutLine: {'line': b'        and lets brick fall to ground\n'}
[0.971774] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.971844] (turtle_brick) StdoutLine: {'line': b'        -robot_sub:continuous robot position\n'}
[0.971907] (turtle_brick) StdoutLine: {'line': b'        -drop_sub: gets placed brick position and sends if drop service is called \n'}
[0.971970] (turtle_brick) StdoutLine: {'line': b'        -catch_sub: gets True the brick is caught on the platform\n'}
[0.972047] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.972111] (turtle_brick) StdoutLine: {'line': b'        -goal_pose: send pose to turtle robot\n'}
[0.972186] (turtle_brick) StdoutLine: {'line': b'        -tilt: send tilt angle to platform on turtle robot\n'}
[0.972250] (turtle_brick) StdoutLine: {'line': b'        -text marker: publishes "UNREACHABLE" if robot can\'t reach in time\n'}
[0.972330] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.972397] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.972461] (turtle_brick) StdoutLine: {'line': b'                                                            ^\n'}
[0.972524] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.972588] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:34:82: W291 trailing whitespace\n'}
[0.972652] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.972715] (turtle_brick) StdoutLine: {'line': b'    calculates if robot can catch placed brick in time or not\n'}
[0.972778] (turtle_brick) StdoutLine: {'line': b'    -If it can catch, robot travels to drop location, catches brick, \n'}
[0.972842] (turtle_brick) StdoutLine: {'line': b'        travels back to origin, and tilts brick off\n'}
[0.972905] (turtle_brick) StdoutLine: {'line': b'    -If the robot can\'t reach brick in time, the screen publishes "UNREACHABLE",\n'}
[0.972970] (turtle_brick) StdoutLine: {'line': b'        and lets brick fall to ground\n'}
[0.973034] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.973098] (turtle_brick) StdoutLine: {'line': b'        -robot_sub:continuous robot position\n'}
[0.973162] (turtle_brick) StdoutLine: {'line': b'        -drop_sub: gets placed brick position and sends if drop service is called \n'}
[0.973226] (turtle_brick) StdoutLine: {'line': b'        -catch_sub: gets True the brick is caught on the platform\n'}
[0.973291] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.973356] (turtle_brick) StdoutLine: {'line': b'        -goal_pose: send pose to turtle robot\n'}
[0.973419] (turtle_brick) StdoutLine: {'line': b'        -tilt: send tilt angle to platform on turtle robot\n'}
[0.973482] (turtle_brick) StdoutLine: {'line': b'        -text marker: publishes "UNREACHABLE" if robot can\'t reach in time\n'}
[0.973548] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.973611] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.973676] (turtle_brick) StdoutLine: {'line': b'                                                             \n'}
[0.973740] (turtle_brick) StdoutLine: {'line': b'           ^\n'}
[0.973804] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.973869] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:44:9: E265 block comment should start with '# '\n"}
[0.973934] (turtle_brick) StdoutLine: {'line': b'        #params\n'}
[0.973998] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.974062] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.974126] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:45:33: W291 trailing whitespace\n'}
[0.974189] (turtle_brick) StdoutLine: {'line': b'        self.declare_parameters( \n'}
[0.974253] (turtle_brick) StdoutLine: {'line': b'                                ^\n'}
[0.974316] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.974379] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:50:32: E231 missing whitespace after ','\n"}
[0.974443] (turtle_brick) StdoutLine: {'line': b"                ('max_velocity',3.0),\n"}
[0.974506] (turtle_brick) StdoutLine: {'line': b'                               ^\n'}
[0.974569] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.974632] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:51:27: E231 missing whitespace after ','\n"}
[0.974707] (turtle_brick) StdoutLine: {'line': b"                ('gravity',9.8)\n"}
[0.974770] (turtle_brick) StdoutLine: {'line': b'                          ^\n'}
[0.974834] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.974897] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:58:9: E265 block comment should start with '# '\n"}
[0.974960] (turtle_brick) StdoutLine: {'line': b'        #variables\n'}
[0.975067] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.975207] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.975339] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:61:9: E265 block comment should start with '# '\n"}
[0.975417] (turtle_brick) StdoutLine: {'line': b'        #state\n'}
[0.975486] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.975555] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.975622] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:63:9: E265 block comment should start with '# '\n"}
[0.975691] (turtle_brick) StdoutLine: {'line': b'        #subscritions\n'}
[0.975759] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.975827] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.975894] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:64:55: E231 missing whitespace after ','\n"}
[0.975961] (turtle_brick) StdoutLine: {'line': b"        self.robot_sub = self.create_subscription(Pose,'/robot',self.robot_callback,10)\n"}
[0.976029] (turtle_brick) StdoutLine: {'line': b'                                                      ^\n'}
[0.976107] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.976171] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:64:64: E231 missing whitespace after ','\n"}
[0.976235] (turtle_brick) StdoutLine: {'line': b"        self.robot_sub = self.create_subscription(Pose,'/robot',self.robot_callback,10)\n"}
[0.976311] (turtle_brick) StdoutLine: {'line': b'                                                               ^\n'}
[0.976379] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.976442] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:64:84: E231 missing whitespace after ','\n"}
[0.976506] (turtle_brick) StdoutLine: {'line': b"        self.robot_sub = self.create_subscription(Pose,'/robot',self.robot_callback,10)\n"}
[0.976577] (turtle_brick) StdoutLine: {'line': b'                                                                                   ^\n'}
[0.976642] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.976705] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:65:57: E231 missing whitespace after ','\n"}
[0.976768] (turtle_brick) StdoutLine: {'line': b"        self.drop_sub = self.create_subscription(Vector3,'/drop', self.drop_callback,10)\n"}
[0.976831] (turtle_brick) StdoutLine: {'line': b'                                                        ^\n'}
[0.976894] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.976956] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:65:85: E231 missing whitespace after ','\n"}
[0.977018] (turtle_brick) StdoutLine: {'line': b"        self.drop_sub = self.create_subscription(Vector3,'/drop', self.drop_callback,10)\n"}
[0.977082] (turtle_brick) StdoutLine: {'line': b'                                                                                    ^\n'}
[0.977146] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.977208] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:66:55: E231 missing whitespace after ','\n"}
[0.977270] (turtle_brick) StdoutLine: {'line': b"        self.catch_sub = self.create_subscription(Bool,'/catch', self.catch_callback,10)\n"}
[0.977332] (turtle_brick) StdoutLine: {'line': b'                                                      ^\n'}
[0.977395] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.977457] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:66:85: E231 missing whitespace after ','\n"}
[0.977519] (turtle_brick) StdoutLine: {'line': b"        self.catch_sub = self.create_subscription(Bool,'/catch', self.catch_callback,10)\n"}
[0.977590] (turtle_brick) StdoutLine: {'line': b'                                                                                    ^\n'}
[0.977652] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.977713] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:67:9: E265 block comment should start with '# '\n"}
[0.977775] (turtle_brick) StdoutLine: {'line': b'        #publisher\n'}
[0.977836] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.977898] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.977959] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:68:22: E225 missing whitespace around operator\n'}
[0.978037] (turtle_brick) StdoutLine: {'line': b"        self.goal_pub= self.create_publisher(PoseStamped,'/goal_pose',10)\n"}
[0.978103] (turtle_brick) StdoutLine: {'line': b'                     ^\n'}
[0.978169] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.978235] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:68:57: E231 missing whitespace after ','\n"}
[0.978302] (turtle_brick) StdoutLine: {'line': b"        self.goal_pub= self.create_publisher(PoseStamped,'/goal_pose',10)\n"}
[0.978368] (turtle_brick) StdoutLine: {'line': b'                                                        ^\n'}
[0.978475] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.978565] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:68:70: E231 missing whitespace after ','\n"}
[0.978637] (turtle_brick) StdoutLine: {'line': b"        self.goal_pub= self.create_publisher(PoseStamped,'/goal_pose',10)\n"}
[0.978722] (turtle_brick) StdoutLine: {'line': b'                                                                     ^\n'}
[0.978792] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.978861] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:69:22: E225 missing whitespace around operator\n'}
[0.978931] (turtle_brick) StdoutLine: {'line': b"        self.tilt_pub= self.create_publisher(Tilt,'/tilt',10)\n"}
[0.979000] (turtle_brick) StdoutLine: {'line': b'                     ^\n'}
[0.979069] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.979139] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:69:50: E231 missing whitespace after ','\n"}
[0.979209] (turtle_brick) StdoutLine: {'line': b"        self.tilt_pub= self.create_publisher(Tilt,'/tilt',10)\n"}
[0.979298] (turtle_brick) StdoutLine: {'line': b'                                                 ^\n'}
[0.979359] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.979419] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:69:58: E231 missing whitespace after ','\n"}
[0.979481] (turtle_brick) StdoutLine: {'line': b"        self.tilt_pub= self.create_publisher(Tilt,'/tilt',10)\n"}
[0.979542] (turtle_brick) StdoutLine: {'line': b'                                                         ^\n'}
[0.979603] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.979664] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:70:55: E231 missing whitespace after ','\n"}
[0.979726] (turtle_brick) StdoutLine: {'line': b"        self.marker_pub = self.create_publisher(Marker,'/marker',10)\n"}
[0.979787] (turtle_brick) StdoutLine: {'line': b'                                                      ^\n'}
[0.979849] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.979910] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:70:65: E231 missing whitespace after ','\n"}
[0.979972] (turtle_brick) StdoutLine: {'line': b"        self.marker_pub = self.create_publisher(Marker,'/marker',10)\n"}
[0.980034] (turtle_brick) StdoutLine: {'line': b'                                                                ^\n'}
[0.980096] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.980157] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:71:9: E265 block comment should start with '# '\n"}
[0.980219] (turtle_brick) StdoutLine: {'line': b'        #pose and posestamp and tilt\n'}
[0.980290] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.980365] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.980428] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:73:1: W293 blank line contains whitespace\n'}
[0.980499] (turtle_brick) StdoutLine: {'line': b'    \n'}
[0.980561] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.980623] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.980685] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:74:9: E265 block comment should start with '# '\n"}
[0.980747] (turtle_brick) StdoutLine: {'line': b'        #the text marker\n'}
[0.980809] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.980871] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.980933] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:97:1: W293 blank line contains whitespace\n'}
[0.980995] (turtle_brick) StdoutLine: {'line': b'    \n'}
[0.981057] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.981118] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.981179] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:98:5: E303 too many blank lines (3)\n'}
[0.981241] (turtle_brick) StdoutLine: {'line': b'    def robot_callback(self,msg):\n'}
[0.981303] (turtle_brick) StdoutLine: {'line': b'    ^\n'}
[0.981364] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.981425] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:98:28: E231 missing whitespace after ','\n"}
[0.981487] (turtle_brick) StdoutLine: {'line': b'    def robot_callback(self,msg):\n'}
[0.981548] (turtle_brick) StdoutLine: {'line': b'                           ^\n'}
[0.981609] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.981672] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:102:100: E501 line too long (100 > 99 characters)\n'}
[0.981741] (turtle_brick) StdoutLine: {'line': b'        if self.state == State.TILT and abs(self.platformx) <= 0.05 and abs(self.platformy) <= 0.05:\n'}
[0.981804] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.981866] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.981927] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:108:1: W293 blank line contains whitespace\n'}
[0.981988] (turtle_brick) StdoutLine: {'line': b'    \n'}
[0.982063] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.982124] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.982185] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:109:28: E231 missing whitespace after ','\n"}
[0.982248] (turtle_brick) StdoutLine: {'line': b'    def catch_callback(self,msg):\n'}
[0.982309] (turtle_brick) StdoutLine: {'line': b'                           ^\n'}
[0.982370] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.982432] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:119:5: E303 too many blank lines (2)\n'}
[0.982495] (turtle_brick) StdoutLine: {'line': b'    def drop_callback(self,msg):\n'}
[0.982556] (turtle_brick) StdoutLine: {'line': b'    ^\n'}
[0.982617] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.982678] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:119:27: E231 missing whitespace after ','\n"}
[0.982740] (turtle_brick) StdoutLine: {'line': b'    def drop_callback(self,msg):\n'}
[0.982801] (turtle_brick) StdoutLine: {'line': b'                          ^\n'}
[0.982862] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.982924] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:124:40: E225 missing whitespace around operator\n'}
[0.982986] (turtle_brick) StdoutLine: {'line': b'        if self.brick_pose.position.z >self.height:\n'}
[0.983059] (turtle_brick) StdoutLine: {'line': b'                                       ^\n'}
[0.983119] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.983178] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:126:13: E265 block comment should start with '# '\n"}
[0.983238] (turtle_brick) StdoutLine: {'line': b'            #calc time takes robot to move to x,y position from current position in max velocity speed (3.0 m/s) to 0.3 radius of the platform\n'}
[0.983299] (turtle_brick) StdoutLine: {'line': b'            ^\n'}
[0.983359] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.983429] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:126:100: E501 line too long (142 > 99 characters)\n'}
[0.983488] (turtle_brick) StdoutLine: {'line': b'            #calc time takes robot to move to x,y position from current position in max velocity speed (3.0 m/s) to 0.3 radius of the platform\n'}
[0.983549] (turtle_brick) StderrLine: {'line': b'\x1b[33m=============================== warnings summary ===============================\x1b[0m\n'}
[0.983623] (turtle_brick) StderrLine: {'line': b'test/test_flake8.py::test_flake8\n'}
[0.983684] (turtle_brick) StderrLine: {'line': b'test/test_flake8.py::test_flake8\n'}
[0.983742] (turtle_brick) StderrLine: {'line': b'  Warning: SelectableGroups dict interface is deprecated. Use select.\n'}
[0.983800] (turtle_brick) StderrLine: {'line': b'\n'}
[0.983859] (turtle_brick) StderrLine: {'line': b'-- Docs: https://docs.pytest.org/en/stable/warnings.html\n'}
[0.983917] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.983976] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.984036] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:127:100: E501 line too long (155 > 99 characters)\n'}
[0.984095] (turtle_brick) StdoutLine: {'line': b'            timerobo = math.sqrt((abs(self.brick_pose.position.x-self.platformx)-0.3)**2+(abs(self.brick_pose.position.y-self.platformy)-0.3)**2)/self.vmax\n'}
[0.984171] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.984319] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.984442] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:128:28: E225 missing whitespace around operator\n'}
[0.984540] (turtle_brick) StdoutLine: {'line': b'            if timerobo+1.0<=timefall: #1.0 is to give some time for message to be revieved and acted upon\n'}
[0.984606] (turtle_brick) StdoutLine: {'line': b'                           ^\n'}
[0.984669] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.984729] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:128:39: E261 at least two spaces before inline comment\n'}
[0.984790] (turtle_brick) StdoutLine: {'line': b'            if timerobo+1.0<=timefall: #1.0 is to give some time for message to be revieved and acted upon\n'}
[0.984851] (turtle_brick) StdoutLine: {'line': b'                                      ^\n'}
[0.984922] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.984983] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:128:40: E262 inline comment should start with '# '\n"}
[0.985056] (turtle_brick) StdoutLine: {'line': b'            if timerobo+1.0<=timefall: #1.0 is to give some time for message to be revieved and acted upon\n'}
[0.985118] (turtle_brick) StdoutLine: {'line': b'                                       ^\n'}
[0.985180] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.985241] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:128:100: E501 line too long (106 > 99 characters)\n'}
[0.985310] (turtle_brick) StdoutLine: {'line': b'            if timerobo+1.0<=timefall: #1.0 is to give some time for message to be revieved and acted upon\n'}
[0.985373] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.985435] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.985496] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:138:1: W293 blank line contains whitespace\n'}
[0.985558] (turtle_brick) StdoutLine: {'line': b'        \n'}
[0.985619] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.985681] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.985742] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:139:1: W293 blank line contains whitespace\n'}
[0.985804] (turtle_brick) StdoutLine: {'line': b'        \n'}
[0.985865] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.985926] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.985994] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:140:1: W293 blank line contains whitespace\n'}
[0.986068] (turtle_brick) StdoutLine: {'line': b'        \n'}
[0.986128] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.986188] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.986247] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:143:1: E303 too many blank lines (6)\n'}
[0.986307] (turtle_brick) StdoutLine: {'line': b'def catcher_entry(args=None):\n'}
[0.986452] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.986568] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.986673] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:147:21: W292 no newline at end of file\n'}
[0.986782] (turtle_brick) StdoutLine: {'line': b'    rclpy.shutdown()                    ^\n'}
[0.986855] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.986920] (turtle_brick) StdoutLine: {'line': b'./test/math_test.py:4:1: W293 blank line contains whitespace\n'}
[0.986992] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.987057] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.987121] (turtle_brick) StdoutLine: {'line': b'./test/math_test.py:4:9: W292 no newline at end of file\n'}
[0.987185] (turtle_brick) StdoutLine: {'line': b'                ^\n'}
[0.987248] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.987311] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:1:1: F401 'ament_copyright.main.main' imported but unused\n"}
[0.987375] (turtle_brick) StdoutLine: {'line': b'from ament_copyright.main import main\n'}
[0.987438] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.987501] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.987564] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:2:1: F401 'pytest' imported but unused\n"}
[0.987627] (turtle_brick) StdoutLine: {'line': b'import pytest\n'}
[0.987690] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.987753] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.987816] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:3:1: F401 'launch' imported but unused\n"}
[0.987879] (turtle_brick) StdoutLine: {'line': b'import launch\n'}
[0.987942] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.988005] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.988067] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:4:1: F401 'launch_pytest' imported but unused\n"}
[0.988129] (turtle_brick) StdoutLine: {'line': b'import launch_pytest\n'}
[0.988192] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.988253] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.988338] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:5:1: F401 'sys' imported but unused\n"}
[0.988404] (turtle_brick) StdoutLine: {'line': b'import sys\n'}
[0.988467] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.988529] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.988591] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:6:1: F401 'launch_ros' imported but unused\n"}
[0.988653] (turtle_brick) StdoutLine: {'line': b'import launch_ros\n'}
[0.988714] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.988776] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.988837] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:7:1: F401 'pathlib.Path' imported but unused\n"}
[0.988900] (turtle_brick) StdoutLine: {'line': b'from pathlib import Path\n'}
[0.988961] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.989023] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.989099] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:8:1: E265 block comment should start with '# '\n"}
[0.989164] (turtle_brick) StdoutLine: {'line': b'#found this example here https://github.com/ros2/launch/blob/humble/launch_pytest/test/launch_pytest/examples/check_node_msgs.py\n'}
[0.989229] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.989293] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.989357] (turtle_brick) StdoutLine: {'line': b'./test/brick.test.py:8:100: E501 line too long (128 > 99 characters)\n'}
[0.989420] (turtle_brick) StdoutLine: {'line': b'#found this example here https://github.com/ros2/launch/blob/humble/launch_pytest/test/launch_pytest/examples/check_node_msgs.py\n'}
[0.989492] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.989557] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.989620] (turtle_brick) StdoutLine: {'line': b'./test/brick.test.py:21:9: W292 no newline at end of file\n'}
[0.989683] (turtle_brick) StdoutLine: {'line': b'#     ])        ^\n'}
[0.989746] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.989809] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:1:1: F401 'ament_index_python.packages.get_package_share_path' imported but unused\n"}
[0.989873] (turtle_brick) StdoutLine: {'line': b'from ament_index_python.packages import get_package_share_path,get_package_share_directory\n'}
[0.989938] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.990001] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.990064] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:1:63: E231 missing whitespace after ','\n"}
[0.990128] (turtle_brick) StdoutLine: {'line': b'from ament_index_python.packages import get_package_share_path,get_package_share_directory\n'}
[0.990191] (turtle_brick) StdoutLine: {'line': b'                                                              ^\n'}
[0.990254] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.990317] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:5:1: F401 'launch.conditions.UnlessCondition' imported but unused\n"}
[0.990381] (turtle_brick) StdoutLine: {'line': b'from launch.conditions import IfCondition, UnlessCondition\n'}
[0.990444] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.990507] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.990569] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:12:90: W291 trailing whitespace\n'}
[0.990632] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.990694] (turtle_brick) StdoutLine: {'line': b'took bases from https://github.com/ros/urdf_tutorial/blob/ros2/launch/display.launch.py\n'}
[0.990757] (turtle_brick) StdoutLine: {'line': b'launches the rviz, robot publisher, and choosen joint state publisher nodes and takes the \n'}
[0.990821] (turtle_brick) StdoutLine: {'line': b'turtle_robot.urdf.xacro file from the urdf folder\n'}
[0.990884] (turtle_brick) StdoutLine: {'line': b'LAUNCH ARGUMENTS:\n'}
[0.990947] (turtle_brick) StdoutLine: {'line': b'    -use_jsp: \n'}
[0.991009] (turtle_brick) StdoutLine: {'line': b'        default: \'"gui"\'\n'}
[0.991073] (turtle_brick) StdoutLine: {'line': b'        arguments: [\'"gui"\', \'"jsp"\', \'"none"\']\n'}
[0.991136] (turtle_brick) StdoutLine: {'line': b'            \'"gui"\': launches with joint_state_publisher_gui_node\n'}
[0.991200] (turtle_brick) StdoutLine: {'line': b'            \'"jsp"\': launches with joint_state_publisher_node\n'}
[0.991264] (turtle_brick) StdoutLine: {'line': b'            \'"none"\': does not use either joint state publisher\n'}
[0.991327] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.991390] (turtle_brick) StdoutLine: {'line': b'   \n'}
[0.991453] (turtle_brick) StdoutLine: {'line': b'                                                                                     ^\n'}
[0.991516] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.991578] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:15:14: W291 trailing whitespace\n'}
[0.991641] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.991703] (turtle_brick) StdoutLine: {'line': b'took bases from https://github.com/ros/urdf_tutorial/blob/ros2/launch/display.launch.py\n'}
[0.991767] (turtle_brick) StdoutLine: {'line': b'launches the rviz, robot publisher, and choosen joint state publisher nodes and takes the \n'}
[0.991830] (turtle_brick) StdoutLine: {'line': b'turtle_robot.urdf.xacro file from the urdf folder\n'}
[0.991893] (turtle_brick) StdoutLine: {'line': b'LAUNCH ARGUMENTS:\n'}
[0.991957] (turtle_brick) StdoutLine: {'line': b'    -use_jsp: \n'}
[0.992020] (turtle_brick) StdoutLine: {'line': b'        default: \'"gui"\'\n'}
[0.992084] (turtle_brick) StdoutLine: {'line': b'        arguments: [\'"gui"\', \'"jsp"\', \'"none"\']\n'}
[0.992155] (turtle_brick) StdoutLine: {'line': b'            \'"gui"\': launches with joint_state_publisher_gui_node\n'}
[0.992219] (turtle_brick) StdoutLine: {'line': b'            \'"jsp"\': launches with joint_state_publisher_node\n'}
[0.992305] (turtle_brick) StdoutLine: {'line': b'            \'"none"\': does not use either joint state publisher\n'}
[0.992377] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.992440] (turtle_brick) StdoutLine: {'line': b'   \n'}
[0.992503] (turtle_brick) StdoutLine: {'line': b'         ^\n'}
[0.992566] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.992629] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:23:1: E302 expected 2 blank lines, found 1\n'}
[0.992700] (turtle_brick) StdoutLine: {'line': b'def generate_launch_description():\n'}
[0.992764] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.992827] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.992890] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:24:22: E225 missing whitespace around operator\n'}
[0.992960] (turtle_brick) StdoutLine: {'line': b"    turtle_brick_path= 'src/turtle_brick'\n"}
[0.993024] (turtle_brick) StdoutLine: {'line': b'                     ^\n'}
[0.993087] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.993151] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:26:51: E225 missing whitespace around operator\n'}
[0.993215] (turtle_brick) StdoutLine: {'line': b"    default_rviz_config_path = turtle_brick_path +'/config/turtle_urdf.rviz'\n"}
[0.993279] (turtle_brick) StdoutLine: {'line': b'                                                  ^\n'}
[0.993343] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.993406] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:27:1: W293 blank line contains whitespace\n'}
[0.993470] (turtle_brick) StdoutLine: {'line': b'    \n'}
[0.993534] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.993597] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.993660] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:28:5: F841 local variable 'use_sim_time' is assigned to but never used\n"}
[0.993725] (turtle_brick) StdoutLine: {'line': b"    use_sim_time = LaunchConfiguration('use_sim_time', default='false')\n"}
[0.993789] (turtle_brick) StdoutLine: {'line': b'    ^\n'}
[0.993852] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.993916] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:30:100: E501 line too long (115 > 99 characters)\n'}
[0.993980] (turtle_brick) StdoutLine: {'line': b'    use_jsp_arg = DeclareLaunchArgument(name=\'use_jsp\', default_value=\'"gui"\', choices=[\'"gui"\', \'"jsp"\',\'"none"\'],\n'}
[0.994045] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.994109] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.994172] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:30:105: E231 missing whitespace after ','\n"}
[0.994236] (turtle_brick) StdoutLine: {'line': b'    use_jsp_arg = DeclareLaunchArgument(name=\'use_jsp\', default_value=\'"gui"\', choices=[\'"gui"\', \'"jsp"\',\'"none"\'],\n'}
[0.994300] (turtle_brick) StdoutLine: {'line': b'                                                                                                        ^\n'}
[0.994373] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.994486] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:31:37: E128 continuation line under-indented for visual indent\n'}
[0.994643] (turtle_brick) StdoutLine: {'line': b"                                    description='Flag to enable joint_state_publisher_gui')#change\n"}
[0.994778] (turtle_brick) StdoutLine: {'line': b'                                    ^\n'}
[0.994871] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.994938] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:31:92: E261 at least two spaces before inline comment\n'}
[0.995005] (turtle_brick) StdoutLine: {'line': b"                                    description='Flag to enable joint_state_publisher_gui')#change\n"}
[0.995094] (turtle_brick) StdoutLine: {'line': b'                                                                                           ^\n'}
[0.995163] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.995233] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:31:92: E262 inline comment should start with '# '\n"}
[0.995302] (turtle_brick) StdoutLine: {'line': b"                                    description='Flag to enable joint_state_publisher_gui')#change\n"}
[0.995372] (turtle_brick) StdoutLine: {'line': b'                                                                                           ^\n'}
[0.995440] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.995508] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:34:100: E501 line too long (100 > 99 characters)\n'}
[0.995576] (turtle_brick) StdoutLine: {'line': b"    rviz_arg = DeclareLaunchArgument(name='rvizconfig', default_value=str(default_rviz_config_path),\n"}
[0.995644] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.995712] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.995780] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:48:89: E231 missing whitespace after ','\n"}
[0.995848] (turtle_brick) StdoutLine: {'line': b"        parameters=[{'robot_description': robot_description, 'publish_frequency': 100.0},config,]\n"}
[0.995918] (turtle_brick) StdoutLine: {'line': b'                                                                                        ^\n'}
[0.995986] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.996065] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:48:96: E231 missing whitespace after ','\n"}
[0.996131] (turtle_brick) StdoutLine: {'line': b"        parameters=[{'robot_description': robot_description, 'publish_frequency': 100.0},config,]\n"}
[0.996197] (turtle_brick) StdoutLine: {'line': b'                                                                                               ^\n'}
[0.996262] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.996349] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:55:56: E231 missing whitespace after ','\n"}
[0.996417] (turtle_brick) StdoutLine: {'line': b'        condition=IfCondition(PythonExpression([use_jsp,"==\'jsp\'"]))\n'}
[0.996484] (turtle_brick) StdoutLine: {'line': b'                                                       ^\n'}
[0.996550] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.996616] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:61:56: E231 missing whitespace after ','\n"}
[0.996682] (turtle_brick) StdoutLine: {'line': b'        condition=IfCondition(PythonExpression([use_jsp,"==\'gui\'"]))\n'}
[0.996748] (turtle_brick) StdoutLine: {'line': b'                                                       ^\n'}
[0.996813] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.996878] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:80:7: W292 no newline at end of file\n'}
[0.996943] (turtle_brick) StdoutLine: {'line': b'    ])      ^\n'}
[0.997009] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.997074] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:2:1: F401 'ament_index_python.packages.get_package_share_path' imported but unused\n"}
[0.997141] (turtle_brick) StdoutLine: {'line': b'from ament_index_python.packages import get_package_share_path, get_package_share_directory\n'}
[0.997215] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.997281] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.997346] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:5:1: F401 'launch.actions.DeclareLaunchArgument' imported but unused\n"}
[0.997412] (turtle_brick) StdoutLine: {'line': b'from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription\n'}
[0.997477] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.997542] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.997613] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:6:1: F401 'launch.conditions.IfCondition' imported but unused\n"}
[0.997679] (turtle_brick) StdoutLine: {'line': b'from launch.conditions import IfCondition, UnlessCondition\n'}
[0.997744] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.997808] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.997872] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:6:1: F401 'launch.conditions.UnlessCondition' imported but unused\n"}
[0.997944] (turtle_brick) StdoutLine: {'line': b'from launch.conditions import IfCondition, UnlessCondition\n'}
[0.998008] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.998086] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.998149] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:7:1: F401 'launch.substitutions.Command' imported but unused\n"}
[0.998212] (turtle_brick) StdoutLine: {'line': b'from launch.substitutions import Command, LaunchConfiguration, PathJoinSubstitution\n'}
[0.998284] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.998347] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.998410] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:7:1: F401 'launch.substitutions.LaunchConfiguration' imported but unused\n"}
[0.998473] (turtle_brick) StdoutLine: {'line': b'from launch.substitutions import Command, LaunchConfiguration, PathJoinSubstitution\n'}
[0.998537] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.998598] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.998661] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:10:1: F401 'launch_ros.parameter_descriptions.ParameterValue' imported but unused\n"}
[0.998725] (turtle_brick) StdoutLine: {'line': b'from launch_ros.parameter_descriptions import ParameterValue\n'}
[0.998788] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.998850] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.998912] (turtle_brick) StdoutLine: {'line': b'./launch/run_turtle.launch.py:13:69: W291 trailing whitespace\n'}
[0.998975] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.999039] (turtle_brick) StdoutLine: {'line': b'launches turtlesim and turtle_robot node along with all the nodes in \n'}
[0.999102] (turtle_brick) StdoutLine: {'line': b'show_turtle launch file. Also connects yaml file to turtle_robot\n'}
[0.999166] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.999229] (turtle_brick) StdoutLine: {'line': b'   \n'}
[0.999290] (turtle_brick) StdoutLine: {'line': b'                                                                ^\n'}
[0.999352] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.999414] (turtle_brick) StdoutLine: {'line': b'./launch/run_turtle.launch.py:16:1: E302 expected 2 blank lines, found 0\n'}
[0.999477] (turtle_brick) StdoutLine: {'line': b'def generate_launch_description():\n'}
[0.999539] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.999601] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.999663] (turtle_brick) StdoutLine: {'line': b'./launch/run_turtle.launch.py:43:23: E251 unexpected spaces around keyword / parameter equals\n'}
[0.999725] (turtle_brick) StdoutLine: {'line': b"            remappings = [('/cmd_vel', '/turtlesim1/turtle1/cmd_vel'),],\n"}
[0.999788] (turtle_brick) StdoutLine: {'line': b'                      ^\n'}
[0.999850] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.999912] (turtle_brick) StdoutLine: {'line': b'./launch/run_turtle.launch.py:43:25: E251 unexpected spaces around keyword / parameter equals\n'}
[0.999972] (-) TimerEvent: {}
[1.000083] (turtle_brick) StdoutLine: {'line': b"            remappings = [('/cmd_vel', '/turtlesim1/turtle1/cmd_vel'),],\n"}
[1.000221] (turtle_brick) StdoutLine: {'line': b'                        ^\n'}
[1.000331] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.000402] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:43:70: E231 missing whitespace after ','\n"}
[1.000470] (turtle_brick) StdoutLine: {'line': b"            remappings = [('/cmd_vel', '/turtlesim1/turtle1/cmd_vel'),],\n"}
[1.000538] (turtle_brick) StdoutLine: {'line': b'                                                                     ^\n'}
[1.000612] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.000678] (turtle_brick) StdoutLine: {'line': b'./launch/run_turtle.launch.py:46:1: W293 blank line contains whitespace\n'}
[1.000745] (turtle_brick) StdoutLine: {'line': b'        \n'}
[1.000810] (turtle_brick) StdoutLine: {'line': b'^\n'}
[1.000876] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.000941] (turtle_brick) StdoutLine: {'line': b'./launch/run_turtle.launch.py:47:7: W292 no newline at end of file\n'}
[1.001007] (turtle_brick) StdoutLine: {'line': b'    ])      ^\n'}
[1.001085] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.001148] (turtle_brick) StdoutLine: {'line': b'./launch/turtle_arena.launch.py:5:27: E271 multiple spaces after keyword\n'}
[1.001211] (turtle_brick) StdoutLine: {'line': b'from launch.actions import  IncludeLaunchDescription\n'}
[1.001275] (turtle_brick) StdoutLine: {'line': b'                          ^\n'}
[1.001351] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.001411] (turtle_brick) StdoutLine: {'line': b'./launch/turtle_arena.launch.py:10:61: W291 trailing whitespace\n'}
[1.001472] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[1.001533] (turtle_brick) StdoutLine: {'line': b'launches arena and catcher nodes along with all the nodes in \n'}
[1.001595] (turtle_brick) StdoutLine: {'line': b'show_turtle launch file.\n'}
[1.001656] (turtle_brick) StdoutLine: {'line': b'Also connects to yaml files to arena and catcher node \n'}
[1.001716] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[1.001778] (turtle_brick) StdoutLine: {'line': b'   \n'}
[1.001838] (turtle_brick) StdoutLine: {'line': b'                                                        ^\n'}
[1.001900] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.001961] (turtle_brick) StdoutLine: {'line': b'./launch/turtle_arena.launch.py:12:54: W291 trailing whitespace\n'}
[1.002035] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[1.002098] (turtle_brick) StdoutLine: {'line': b'launches arena and catcher nodes along with all the nodes in \n'}
[1.002161] (turtle_brick) StdoutLine: {'line': b'show_turtle launch file.\n'}
[1.002223] (turtle_brick) StdoutLine: {'line': b'Also connects to yaml files to arena and catcher node \n'}
[1.002286] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[1.002349] (turtle_brick) StdoutLine: {'line': b'   \n'}
[1.002439] (turtle_brick) StdoutLine: {'line': b'                                                 ^\n'}
[1.002579] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.002697] (turtle_brick) StdoutLine: {'line': b'./launch/turtle_arena.launch.py:15:1: E302 expected 2 blank lines, found 1\n'}
[1.002954] (turtle_brick) StdoutLine: {'line': b'def generate_launch_description():\n'}
[1.003076] (turtle_brick) StdoutLine: {'line': b'^\n'}
[1.003254] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.003599] (turtle_brick) StdoutLine: {'line': b'./launch/turtle_arena.launch.py:44:1: W293 blank line contains whitespace\n'}
[1.004082] (turtle_brick) StdoutLine: {'line': b'        \n'}
[1.004476] (turtle_brick) StdoutLine: {'line': b'^\n'}
[1.004653] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.004768] (turtle_brick) StdoutLine: {'line': b'./launch/turtle_arena.launch.py:45:7: W292 no newline at end of file\n'}
[1.004881] (turtle_brick) StdoutLine: {'line': b'    ])      ^\n'}
[1.004992] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.005102] (turtle_brick) StdoutLine: {'line': b'1     E128 continuation line under-indented for visual indent\n'}
[1.005236] (turtle_brick) StdoutLine: {'line': b"2     E202 whitespace before ')'\n"}
[1.005346] (turtle_brick) StdoutLine: {'line': b'7     E225 missing whitespace around operator\n'}
[1.005448] (turtle_brick) StdoutLine: {'line': b"25    E231 missing whitespace after ','\n"}
[1.005549] (turtle_brick) StdoutLine: {'line': b'2     E251 unexpected spaces around keyword / parameter equals\n'}
[1.005651] (turtle_brick) StdoutLine: {'line': b'2     E261 at least two spaces before inline comment\n'}
[1.005752] (turtle_brick) StdoutLine: {'line': b"2     E262 inline comment should start with '# '\n"}
[1.005858] (turtle_brick) StdoutLine: {'line': b"10    E265 block comment should start with '# '\n"}
[1.005958] (turtle_brick) StdoutLine: {'line': b'1     E271 multiple spaces after keyword\n'}
[1.006059] (turtle_brick) StdoutLine: {'line': b'6     E302 expected 2 blank lines, found 0\n'}
[1.006158] (turtle_brick) StdoutLine: {'line': b'3     E303 too many blank lines (3)\n'}
[1.006258] (turtle_brick) StdoutLine: {'line': b'8     E501 line too long (115 > 99 characters)\n'}
[1.006358] (turtle_brick) StdoutLine: {'line': b"23    F401 'ament_index_python.packages.get_package_share_path' imported but unused\n"}
[1.006458] (turtle_brick) StdoutLine: {'line': b"1     F841 local variable 'use_sim_time' is assigned to but never used\n"}
[1.006558] (turtle_brick) StdoutLine: {'line': b'28    W291 trailing whitespace\n'}
[1.006658] (turtle_brick) StdoutLine: {'line': b'6     W292 no newline at end of file\n'}
[1.006758] (turtle_brick) StdoutLine: {'line': b'11    W293 blank line contains whitespace\n'}
[1.006858] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.006958] (turtle_brick) StdoutLine: {'line': b'13 files checked\n'}
[1.007058] (turtle_brick) StdoutLine: {'line': b'138 errors\n'}
[1.007158] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.007257] (turtle_brick) StdoutLine: {'line': b"'E'-type errors: 69\n"}
[1.007357] (turtle_brick) StdoutLine: {'line': b"'F'-type errors: 24\n"}
[1.007457] (turtle_brick) StdoutLine: {'line': b"'W'-type errors: 45\n"}
[1.007557] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.007657] (turtle_brick) StdoutLine: {'line': b'Checked files:\n'}
[1.007757] (turtle_brick) StdoutLine: {'line': b'\n'}
[1.007856] (turtle_brick) StdoutLine: {'line': b'* ./setup.py\n'}
[1.007956] (turtle_brick) StdoutLine: {'line': b'* ./turtle_brick/arena.py\n'}
[1.008055] (turtle_brick) StdoutLine: {'line': b'* ./turtle_brick/turtle_robot.py\n'}
[1.008155] (turtle_brick) StdoutLine: {'line': b'* ./turtle_brick/catcher.py\n'}
[1.008254] (turtle_brick) StdoutLine: {'line': b'* ./turtle_brick/__init__.py\n'}
[1.008340] (turtle_brick) StdoutLine: {'line': b'* ./test/math_test.py\n'}
[1.008402] (turtle_brick) StdoutLine: {'line': b'* ./test/test_flake8.py\n'}
[1.008461] (turtle_brick) StdoutLine: {'line': b'* ./test/test_copyright.py\n'}
[1.008520] (turtle_brick) StdoutLine: {'line': b'* ./test/test_pep257.py\n'}
[1.008578] (turtle_brick) StdoutLine: {'line': b'* ./test/brick.test.py\n'}
[1.008637] (turtle_brick) StdoutLine: {'line': b'* ./launch/show_turtle.launch.py\n'}
[1.008695] (turtle_brick) StdoutLine: {'line': b'* ./launch/run_turtle.launch.py\n'}
[1.008754] (turtle_brick) StdoutLine: {'line': b'* ./launch/turtle_arena.launch.py\n'}
[1.008813] (turtle_brick) StdoutLine: {'line': b'----------------------------- Captured stderr call -----------------------------\n'}
[1.008880] (turtle_brick) StdoutLine: {'line': b'option --max-complexity: please update from optparse string `type=` to argparse callable `type=` -- this will be an error in the future\n'}
[1.008940] (turtle_brick) StdoutLine: {'line': b'\x1b[31m\x1b[1m_________________________________ test_pep257 __________________________________\x1b[0m\n'}
[1.009005] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mtest/test_pep257.py\x1b[0m:23: in test_pep257\n'}
[1.009064] (turtle_brick) StdoutLine: {'line': b"    \x1b[94massert\x1b[39;49;00m rc == \x1b[94m0\x1b[39;49;00m, \x1b[33m'\x1b[39;49;00m\x1b[33mFound code style errors / warnings\x1b[39;49;00m\x1b[33m'\x1b[39;49;00m\n"}
[1.009124] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   AssertionError: Found code style errors / warnings\x1b[0m\n'}
[1.009183] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   assert 1 == 0\x1b[0m\n'}
[1.009242] (turtle_brick) StdoutLine: {'line': b'----------------------------- Captured stdout call -----------------------------\n'}
[1.009301] (turtle_brick) StdoutLine: {'line': b'checking ./launch/run_turtle.launch.py\n'}
[1.009359] (turtle_brick) StdoutLine: {'line': b'checking ./launch/show_turtle.launch.py\n'}
[1.009418] (turtle_brick) StdoutLine: {'line': b'checking ./launch/turtle_arena.launch.py\n'}
[1.009482] (turtle_brick) StdoutLine: {'line': b'checking ./setup.py\n'}
[1.009540] (turtle_brick) StdoutLine: {'line': b'checking ./test/brick.test.py\n'}
[1.009599] (turtle_brick) StdoutLine: {'line': b'checking ./test/math_test.py\n'}
[1.009657] (turtle_brick) StdoutLine: {'line': b'checking ./test/test_copyright.py\n'}
[1.009716] (turtle_brick) StdoutLine: {'line': b'checking ./test/test_flake8.py\n'}
[1.009773] (turtle_brick) StdoutLine: {'line': b'checking ./test/test_pep257.py\n'}
[1.009831] (turtle_brick) StdoutLine: {'line': b'checking ./turtle_brick/__init__.py\n'}
[1.009888] (turtle_brick) StdoutLine: {'line': b'checking ./turtle_brick/arena.py\n'}
[1.009946] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:16 in public class `BState`: D204: 1 blank line required after class docstring (found 0)\n'}
[1.010004] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:16 in public class `BState`: D205: 1 blank line required between summary line and description (found 0)\n'}
[1.010062] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:16 in public class `BState`: D208: Docstring is over-indented\n'}
[1.010120] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:16 in public class `BState`: D210: No whitespaces allowed surrounding docstring text\n'}
[1.010180] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:16 in public class `BState`: D213: Multi-line docstring summary should start at the second line\n'}
[1.010277] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:29 in public class `Arena`: D204: 1 blank line required after class docstring (found 0)\n'}
[1.010372] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:29 in public class `Arena`: D205: 1 blank line required between summary line and description (found 0)\n'}
[1.010492] (turtle_brick) StdoutLine: {'line': b'checking ./turtle_brick/catcher.py\n'}
[1.010609] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:18 in public class `State`: D204: 1 blank line required after class docstring (found 0)\n'}
[1.010755] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:18 in public class `State`: D205: 1 blank line required between summary line and description (found 0)\n'}
[1.010883] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:18 in public class `State`: D208: Docstring is over-indented\n'}
[1.011012] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:18 in public class `State`: D210: No whitespaces allowed surrounding docstring text\n'}
[1.011124] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:18 in public class `State`: D213: Multi-line docstring summary should start at the second line\n'}
[1.011231] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:18 in public class `State`: D400: First line should end with a period (not 't')\n"}
[1.011347] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:18 in public class `State`: D415: First line should end with a period, question mark, or exclamation point (not 't')\n"}
[1.011427] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:26 in public class `Catcher`: D205: 1 blank line required between summary line and description (found 0)\n'}
[1.011492] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:26 in public class `Catcher`: D400: First line should end with a period (not 't')\n"}
[1.011556] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:26 in public class `Catcher`: D415: First line should end with a period, question mark, or exclamation point (not 't')\n"}
[1.011620] (turtle_brick) StdoutLine: {'line': b'checking ./turtle_brick/turtle_robot.py\n'}
[1.011684] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:14 in public class `Turtle_robot`: D204: 1 blank line required after class docstring (found 0)\n'}
[1.011746] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:14 in public class `Turtle_robot`: D205: 1 blank line required between summary line and description (found 0)\n'}
[1.011816] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/turtle_robot.py:14 in public class `Turtle_robot`: D400: First line should end with a period (not ' ')\n"}
[1.011879] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/turtle_robot.py:14 in public class `Turtle_robot`: D415: First line should end with a period, question mark, or exclamation point (not ' ')\n"}
[1.011942] (turtle_brick) StdoutLine: {'line': b'checking test/brick.test.py\n'}
[1.012004] (turtle_brick) StdoutLine: {'line': b'checking test/math_test.py\n'}
[1.012078] (turtle_brick) StdoutLine: {'line': b'checking test/test_copyright.py\n'}
[1.012139] (turtle_brick) StdoutLine: {'line': b'checking test/test_flake8.py\n'}
[1.012199] (turtle_brick) StdoutLine: {'line': b'checking test/test_pep257.py\n'}
[1.012259] (turtle_brick) StdoutLine: {'line': b'21 errors\n'}
[1.012349] (turtle_brick) StdoutLine: {'line': b'- generated xml file: /home/alyssa/homework2-alyssa225/build/turtle_brick/pytest.xml -\n'}
[1.012407] (turtle_brick) StdoutLine: {'line': b'=========================== short test summary info ============================\n'}
[1.012463] (turtle_brick) StdoutLine: {'line': b'FAILED test/test_flake8.py::test_flake8 - AssertionError: Found 138 code styl...\n'}
[1.012520] (turtle_brick) StdoutLine: {'line': b'FAILED test/test_pep257.py::test_pep257 - AssertionError: Found code style er...\n'}
[1.012584] (turtle_brick) StdoutLine: {'line': b'\x1b[31m============== \x1b[31m\x1b[1m2 failed\x1b[0m, \x1b[32m1 passed\x1b[0m, \x1b[33m1 skipped\x1b[0m, \x1b[33m2 warnings\x1b[0m\x1b[31m in 0.39s\x1b[0m\x1b[31m ==============\x1b[0m\n'}
[1.012641] (turtle_brick) CommandEnded: {'returncode': 1}
[1.012870] (turtle_brick) TestFailure: {'identifier': 'turtle_brick'}
[1.012895] (turtle_brick) JobEnded: {'identifier': 'turtle_brick', 'rc': 0}
[1.013266] (-) EventReactorShutdown: {}
