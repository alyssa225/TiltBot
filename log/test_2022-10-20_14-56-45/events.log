[0.000000] (-) TimerEvent: {}
[0.000516] (turtle_brick) JobQueued: {'identifier': 'turtle_brick', 'dependencies': OrderedDict([('turtle_brick', '/home/alyssa/homework2-alyssa225/install/turtle_brick')])}
[0.000578] (turtle_brick_interfaces) JobQueued: {'identifier': 'turtle_brick_interfaces', 'dependencies': OrderedDict([('turtle_brick_interfaces', '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces')])}
[0.001019] (turtle_brick) JobStarted: {'identifier': 'turtle_brick'}
[0.012048] (turtle_brick_interfaces) JobStarted: {'identifier': 'turtle_brick_interfaces'}
[0.098854] (-) TimerEvent: {}
[0.199168] (-) TimerEvent: {}
[0.244378] (turtle_brick) Command: {'cmd': ['/usr/bin/python3', '-m', 'pytest'], 'cwd': '/home/alyssa/homework2-alyssa225/src/turtle_brick', 'env': {'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'alyssa', 'XDG_SESSION_TYPE': 'wayland', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces/lib:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib', 'HOME': '/home/alyssa', 'OLDPWD': '/home/alyssa/homework2-alyssa225/src', 'DESKTOP_SESSION': 'ubuntu', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'SYSTEMD_EXEC_PID': '418763', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'IM_CONFIG_PHASE': '1', 'WAYLAND_DISPLAY': 'wayland-0', 'COLCON_PREFIX_PATH': '/home/alyssa/homework2-alyssa225/install', 'ROS_DISTRO': 'humble', 'LOGNAME': 'alyssa', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 'alyssa', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'ROS_LOCALHOST_ONLY': '0', 'PATH': '/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/alyssa-Galago-Pro:@/tmp/.ICE-unix/1005,unix/alyssa-Galago-Pro:/tmp/.ICE-unix/1005', 'XDG_MENU_PREFIX': 'gnome-', 'GNOME_TERMINAL_SCREEN': '/org/gnome/Terminal/screen/6d4b914e_9fd7_45b5_b317_afa2fd1ab6a4', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1000', 'DISPLAY': ':0', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1000/.mutter-Xwaylandauth.BJT0T1', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'GNOME_TERMINAL_SERVICE': ':1.10137', 'SSH_AGENT_LAUNCHER': 'gnome-keyring', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'AMENT_PREFIX_PATH': '/home/alyssa/homework2-alyssa225/install/turtle_brick:/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces:/opt/ros/humble', 'SHELL': '/bin/bash', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'QT_IM_MODULE': 'ibus', 'PWD': '/home/alyssa/homework2-alyssa225/build/turtle_brick', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/etc/xdg', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/alyssa/homework2-alyssa225/install/turtle_brick/lib/python3.10/site-packages:/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages', 'COLCON': '1', 'VTE_VERSION': '6800', 'CMAKE_PREFIX_PATH': '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces:/home/alyssa/homework2-alyssa225/install/turtle_brick_interface', 'PYTEST_ADDOPTS': '--tb=short --junit-xml=/home/alyssa/homework2-alyssa225/build/turtle_brick/pytest.xml --junit-prefix=turtle_brick -o cache_dir=/home/alyssa/homework2-alyssa225/build/turtle_brick/.pytest_cache'}, 'shell': False}
[0.258467] (turtle_brick_interfaces) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'alyssa'), ('XDG_SESSION_TYPE', 'wayland'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces/lib:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/alyssa'), ('OLDPWD', '/home/alyssa/homework2-alyssa225/src'), ('DESKTOP_SESSION', 'ubuntu'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('SYSTEMD_EXEC_PID', '418763'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('IM_CONFIG_PHASE', '1'), ('WAYLAND_DISPLAY', 'wayland-0'), ('COLCON_PREFIX_PATH', '/home/alyssa/homework2-alyssa225/install'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'alyssa'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'alyssa'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/alyssa-Galago-Pro:@/tmp/.ICE-unix/1005,unix/alyssa-Galago-Pro:/tmp/.ICE-unix/1005'), ('XDG_MENU_PREFIX', 'gnome-'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/6d4b914e_9fd7_45b5_b317_afa2fd1ab6a4'), ('GNOME_SETUP_DISPLAY', ':1'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/.mutter-Xwaylandauth.BJT0T1'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.10137'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces:/home/alyssa/homework2-alyssa225/install/turtle_brick:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces/local/lib/python3.10/dist-packages:/home/alyssa/homework2-alyssa225/install/turtle_brick/lib/python3.10/site-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/alyssa/homework2-alyssa225/install/turtle_brick_interfaces:/home/alyssa/homework2-alyssa225/install/turtle_brick_interface')]), 'shell': False}
[0.265421] (turtle_brick_interfaces) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/CTestConfiguration.ini\n'}
[0.265719] (turtle_brick_interfaces) StdoutLine: {'line': b'Parse Config file:/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/CTestConfiguration.ini\n'}
[0.265865] (turtle_brick_interfaces) StdoutLine: {'line': b'   Site: alyssa-Galago-Pro\n'}
[0.266184] (turtle_brick_interfaces) StdoutLine: {'line': b'   Build name: (empty)\n'}
[0.266269] (turtle_brick_interfaces) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[0.266341] (turtle_brick_interfaces) StdoutLine: {'line': b'Create new tag: 20221020-1956 - Experimental\n'}
[0.266409] (turtle_brick_interfaces) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/CTestConfiguration.ini\n'}
[0.266475] (turtle_brick_interfaces) StdoutLine: {'line': b'Parse Config file:/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/CTestConfiguration.ini\n'}
[0.266549] (turtle_brick_interfaces) StdoutLine: {'line': b'Test project /home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces\n'}
[0.266773] (turtle_brick_interfaces) StdoutLine: {'line': b'Constructing a list of tests\n'}
[0.266919] (turtle_brick_interfaces) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[0.267030] (turtle_brick_interfaces) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[0.267139] (turtle_brick_interfaces) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[0.267248] (turtle_brick_interfaces) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[0.267357] (turtle_brick_interfaces) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[0.267465] (turtle_brick_interfaces) StdoutLine: {'line': b'test 1\n'}
[0.267574] (turtle_brick_interfaces) StdoutLine: {'line': b'    Start 1: lint_cmake\n'}
[0.267683] (turtle_brick_interfaces) StdoutLine: {'line': b'\n'}
[0.267790] (turtle_brick_interfaces) StdoutLine: {'line': b'1: Test command: /usr/bin/python3.10 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/lint_cmake.xunit.xml" "--package-name" "turtle_brick_interfaces" "--output-file" "/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/humble/bin/ament_lint_cmake" "--xunit-file" "/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/lint_cmake.xunit.xml"\n'}
[0.267916] (turtle_brick_interfaces) StdoutLine: {'line': b'1: Test timeout computed to be: 60\n'}
[0.299278] (-) TimerEvent: {}
[0.319932] (turtle_brick_interfaces) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/alyssa/homework2-alyssa225/src/turtle_brick_interfaces':\n"}
[0.320120] (turtle_brick_interfaces) StdoutLine: {'line': b'1:  - /opt/ros/humble/bin/ament_lint_cmake --xunit-file /home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/lint_cmake.xunit.xml\n'}
[0.381026] (turtle_brick_interfaces) StdoutLine: {'line': b'1: CMakeLists.txt:15: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.381267] (turtle_brick_interfaces) StdoutLine: {'line': b'1: \n'}
[0.381452] (turtle_brick_interfaces) StdoutLine: {'line': b'1: \n'}
[0.381626] (turtle_brick_interfaces) StdoutLine: {'line': b'1: 1 errors\n'}
[0.391792] (turtle_brick_interfaces) StdoutLine: {'line': b'1: -- run_test.py: return code 1\n'}
[0.392026] (turtle_brick_interfaces) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/lint_cmake.xunit.xml'\n"}
[0.399217] (turtle_brick_interfaces) StdoutLine: {'line': b'1/2 Test #1: lint_cmake .......................***Failed    0.13 sec\n'}
[0.399580] (-) TimerEvent: {}
[0.399729] (turtle_brick_interfaces) StdoutLine: {'line': b'test 2\n'}
[0.399901] (turtle_brick_interfaces) StdoutLine: {'line': b'    Start 2: xmllint\n'}
[0.400116] (turtle_brick_interfaces) StdoutLine: {'line': b'\n'}
[0.400321] (turtle_brick_interfaces) StdoutLine: {'line': b'2: Test command: /usr/bin/python3.10 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/xmllint.xunit.xml" "--package-name" "turtle_brick_interfaces" "--output-file" "/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/ament_xmllint/xmllint.txt" "--command" "/opt/ros/humble/bin/ament_xmllint" "--xunit-file" "/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/xmllint.xunit.xml"\n'}
[0.400487] (turtle_brick_interfaces) StdoutLine: {'line': b'2: Test timeout computed to be: 60\n'}
[0.454404] (turtle_brick_interfaces) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/alyssa/homework2-alyssa225/src/turtle_brick_interfaces':\n"}
[0.454551] (turtle_brick_interfaces) StdoutLine: {'line': b'2:  - /opt/ros/humble/bin/ament_xmllint --xunit-file /home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/xmllint.xunit.xml\n'}
[0.499676] (-) TimerEvent: {}
[0.528768] (turtle_brick) StdoutLine: {'line': b'\x1b[1m============================= test session starts ==============================\x1b[0m\n'}
[0.529174] (turtle_brick) StdoutLine: {'line': b'platform linux -- Python 3.10.6, pytest-6.2.5, py-1.10.0, pluggy-0.13.0\n'}
[0.530735] (turtle_brick_interfaces) StdoutLine: {'line': b"2: File 'package.xml' is valid\n"}
[0.530983] (turtle_brick_interfaces) StdoutLine: {'line': b'2: \n'}
[0.531136] (turtle_brick_interfaces) StdoutLine: {'line': b'2: No problems found\n'}
[0.534650] (turtle_brick) StdoutLine: {'line': b'cachedir: /home/alyssa/homework2-alyssa225/build/turtle_brick/.pytest_cache\n'}
[0.534968] (turtle_brick) StdoutLine: {'line': b'rootdir: /home/alyssa/homework2-alyssa225/src/turtle_brick\n'}
[0.535161] (turtle_brick) StdoutLine: {'line': b'plugins: ament-lint-0.12.4, ament-xmllint-0.12.4, launch-testing-ros-0.19.3, launch-testing-1.0.2, ament-flake8-0.12.4, ament-pep257-0.12.4, ament-copyright-0.12.4, colcon-core-0.10.0, cov-3.0.0\n'}
[0.542793] (turtle_brick_interfaces) StdoutLine: {'line': b'2: -- run_test.py: return code 0\n'}
[0.543103] (turtle_brick_interfaces) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/test_results/turtle_brick_interfaces/xmllint.xunit.xml'\n"}
[0.552455] (turtle_brick_interfaces) StdoutLine: {'line': b'2/2 Test #2: xmllint ..........................   Passed    0.15 sec\n'}
[0.552907] (turtle_brick_interfaces) StdoutLine: {'line': b'\n'}
[0.553120] (turtle_brick_interfaces) StdoutLine: {'line': b'50% tests passed\x1b[0;0m, \x1b[0;31m1 tests failed\x1b[0;0m out of 2\n'}
[0.553294] (turtle_brick_interfaces) StdoutLine: {'line': b'\n'}
[0.553415] (turtle_brick_interfaces) StdoutLine: {'line': b'Label Time Summary:\n'}
[0.553543] (turtle_brick_interfaces) StdoutLine: {'line': b'lint_cmake    =   0.13 sec*proc (1 test)\n'}
[0.553674] (turtle_brick_interfaces) StdoutLine: {'line': b'linter        =   0.29 sec*proc (2 tests)\n'}
[0.553792] (turtle_brick_interfaces) StdoutLine: {'line': b'xmllint       =   0.15 sec*proc (1 test)\n'}
[0.553909] (turtle_brick_interfaces) StdoutLine: {'line': b'\n'}
[0.554025] (turtle_brick_interfaces) StdoutLine: {'line': b'Total Test time (real) =   0.29 sec\n'}
[0.554142] (turtle_brick_interfaces) StdoutLine: {'line': b'\n'}
[0.554258] (turtle_brick_interfaces) StdoutLine: {'line': b'The following tests FAILED:\n'}
[0.554378] (turtle_brick_interfaces) StdoutLine: {'line': b'\t\x1b[0;31m  1 - lint_cmake (Failed)\x1b[0;0m\n'}
[0.574003] (turtle_brick_interfaces) StderrLine: {'line': b'Errors while running CTest\n'}
[0.574206] (turtle_brick_interfaces) StderrLine: {'line': b'Output from these tests are in: /home/alyssa/homework2-alyssa225/build/turtle_brick_interfaces/Testing/Temporary/LastTest.log\n'}
[0.574347] (turtle_brick_interfaces) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[0.576110] (turtle_brick_interfaces) CommandEnded: {'returncode': 8}
[0.576424] (turtle_brick_interfaces) TestFailure: {'identifier': 'turtle_brick_interfaces'}
[0.576454] (turtle_brick_interfaces) JobEnded: {'identifier': 'turtle_brick_interfaces', 'rc': 0}
[0.599772] (-) TimerEvent: {}
[0.609806] (turtle_brick) StdoutLine: {'line': b'\x1b[1mcollecting ... \x1b[0m\x1b[1m\n'}
[0.610022] (turtle_brick) StdoutLine: {'line': b'collected 4 items                                                              \x1b[0m\n'}
[0.610228] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.617437] (turtle_brick) StdoutLine: {'line': b'test/math_test.py \x1b[32m.\x1b[0m\x1b[32m                                                      [ 25%]\x1b[0m\n'}
[0.618649] (turtle_brick) StdoutLine: {'line': b'test/test_copyright.py \x1b[33ms\x1b[0m\x1b[32m                                                 [ 50%]\x1b[0m\n'}
[0.699882] (-) TimerEvent: {}
[0.800240] (-) TimerEvent: {}
[0.811926] (turtle_brick) StdoutLine: {'line': b'test/test_flake8.py \x1b[31mF\x1b[0m\x1b[31m                                                    [ 75%]\x1b[0m\n'}
[0.875304] (turtle_brick) StdoutLine: {'line': b'test/test_pep257.py \x1b[31mF\x1b[0m\x1b[31m                                                    [100%]\x1b[0m\n'}
[0.875561] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.875647] (turtle_brick) StdoutLine: {'line': b'=================================== FAILURES ===================================\n'}
[0.875777] (turtle_brick) StdoutLine: {'line': b'\x1b[31m\x1b[1m_________________________________ test_flake8 __________________________________\x1b[0m\n'}
[0.875868] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mtest/test_flake8.py\x1b[0m:23: in test_flake8\n'}
[0.900363] (-) TimerEvent: {}
[0.909436] (turtle_brick) StdoutLine: {'line': b'    \x1b[94massert\x1b[39;49;00m rc == \x1b[94m0\x1b[39;49;00m, \\\n'}
[0.909645] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   AssertionError: Found 122 code style errors / warnings:\x1b[0m\n'}
[0.909761] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:114:58: E202 whitespace before ')'\x1b[0m\n"}
[0.910077] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:158:68: W291 trailing whitespace\x1b[0m\n'}
[0.910310] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:159:68: W291 trailing whitespace\x1b[0m\n'}
[0.910460] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:162:56: W291 trailing whitespace\x1b[0m\n'}
[0.910597] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:182:80: E202 whitespace before ')'\x1b[0m\n"}
[0.910685] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:188:60: W291 trailing whitespace\x1b[0m\n'}
[0.910751] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:198:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[0.910816] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:200:16: E225 missing whitespace around operator\x1b[0m\n'}
[0.910881] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/turtle_robot.py:202:19: W291 trailing whitespace\x1b[0m\n'}
[0.910944] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:2:1: F401 'cmath.sqrt' imported but unused\x1b[0m\n"}
[0.911010] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:6:1: F401 'tf2_ros.static_transform_broadcaster.StaticTransformBroadcaster' imported but unused\x1b[0m\n"}
[0.911074] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:7:1: F401 'tf2_ros.TransformBroadcaster' imported but unused\x1b[0m\n"}
[0.911138] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:8:1: F401 'geometry_msgs.msg.TransformStamped' imported but unused\x1b[0m\n"}
[0.911204] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:9:1: F401 'turtle_brick_interfaces.srv.Place' imported but unused\x1b[0m\n"}
[0.911267] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:9:1: F401 'turtle_brick_interfaces.srv.Drop' imported but unused\x1b[0m\n"}
[0.911331] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:11:42: W291 trailing whitespace\x1b[0m\n'}
[0.911395] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:12:12: W291 trailing whitespace\x1b[0m\n'}
[0.911459] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:14:1: F401 '.quaternion.angle_axis_to_quaternion' imported but unused\x1b[0m\n"}
[0.911541] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:17:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[0.913309] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:25:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[0.914028] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:28:69: W291 trailing whitespace\x1b[0m\n'}
[0.914239] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:34:82: W291 trailing whitespace\x1b[0m\n'}
[0.914349] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:44:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.914459] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:45:33: W291 trailing whitespace\x1b[0m\n'}
[0.914569] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:50:32: E231 missing whitespace after ','\x1b[0m\n"}
[0.914680] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:51:27: E231 missing whitespace after ','\x1b[0m\n"}
[0.914789] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:58:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.914897] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:61:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.915037] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:63:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.915151] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:64:55: E231 missing whitespace after ','\x1b[0m\n"}
[0.915280] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:64:64: E231 missing whitespace after ','\x1b[0m\n"}
[0.915395] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:64:84: E231 missing whitespace after ','\x1b[0m\n"}
[0.915509] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:65:57: E231 missing whitespace after ','\x1b[0m\n"}
[0.915623] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:65:85: E231 missing whitespace after ','\x1b[0m\n"}
[0.915746] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:66:55: E231 missing whitespace after ','\x1b[0m\n"}
[0.915853] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:66:85: E231 missing whitespace after ','\x1b[0m\n"}
[0.915961] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:67:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.916068] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:68:22: E225 missing whitespace around operator\x1b[0m\n'}
[0.916176] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:68:57: E231 missing whitespace after ','\x1b[0m\n"}
[0.916285] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:68:70: E231 missing whitespace after ','\x1b[0m\n"}
[0.916392] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:69:22: E225 missing whitespace around operator\x1b[0m\n'}
[0.916499] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:69:50: E231 missing whitespace after ','\x1b[0m\n"}
[0.916616] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:69:58: E231 missing whitespace after ','\x1b[0m\n"}
[0.916692] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:70:55: E231 missing whitespace after ','\x1b[0m\n"}
[0.916758] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:70:65: E231 missing whitespace after ','\x1b[0m\n"}
[0.916823] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:71:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.916887] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:73:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.916951] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:74:9: E265 block comment should start with '# '\x1b[0m\n"}
[0.917017] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:97:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.917084] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:98:5: E303 too many blank lines (3)\x1b[0m\n'}
[0.917156] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:98:28: E231 missing whitespace after ','\x1b[0m\n"}
[0.917218] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:102:100: E501 line too long (100 > 99 characters)\x1b[0m\n'}
[0.917282] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:108:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.917344] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:109:28: E231 missing whitespace after ','\x1b[0m\n"}
[0.917407] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:119:5: E303 too many blank lines (2)\x1b[0m\n'}
[0.917475] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:119:27: E231 missing whitespace after ','\x1b[0m\n"}
[0.917554] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:124:40: E225 missing whitespace around operator\x1b[0m\n'}
[0.917620] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:126:13: E265 block comment should start with '# '\x1b[0m\n"}
[0.917687] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:126:100: E501 line too long (142 > 99 characters)\x1b[0m\n'}
[0.917752] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:127:100: E501 line too long (155 > 99 characters)\x1b[0m\n'}
[0.917824] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:128:28: E225 missing whitespace around operator\x1b[0m\n'}
[0.917893] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:128:39: E261 at least two spaces before inline comment\x1b[0m\n'}
[0.917960] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:128:40: E262 inline comment should start with '# '\x1b[0m\n"}
[0.918028] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:128:100: E501 line too long (106 > 99 characters)\x1b[0m\n'}
[0.918098] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:138:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.918166] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:139:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.918234] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:140:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.918301] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:143:1: E303 too many blank lines (6)\x1b[0m\n'}
[0.918368] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./turtle_brick/catcher.py:147:21: W292 no newline at end of file\x1b[0m\n'}
[0.918451] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./test/math_test.py:4:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.918515] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./test/math_test.py:4:9: W292 no newline at end of file\x1b[0m\n'}
[0.918579] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:1:1: F401 'ament_copyright.main.main' imported but unused\x1b[0m\n"}
[0.918644] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:2:1: F401 'pytest' imported but unused\x1b[0m\n"}
[0.918706] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:3:1: F401 'launch' imported but unused\x1b[0m\n"}
[0.918769] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:4:1: F401 'launch_pytest' imported but unused\x1b[0m\n"}
[0.918833] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:5:1: F401 'sys' imported but unused\x1b[0m\n"}
[0.918896] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:6:1: F401 'launch_ros' imported but unused\x1b[0m\n"}
[0.918980] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:7:1: F401 'pathlib.Path' imported but unused\x1b[0m\n"}
[0.919037] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./test/brick.test.py:8:1: E265 block comment should start with '# '\x1b[0m\n"}
[0.919094] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./test/brick.test.py:8:100: E501 line too long (128 > 99 characters)\x1b[0m\n'}
[0.919150] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./test/brick.test.py:21:9: W292 no newline at end of file\x1b[0m\n'}
[0.919206] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:1:1: F401 'ament_index_python.packages.get_package_share_path' imported but unused\x1b[0m\n"}
[0.919269] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:1:63: E231 missing whitespace after ','\x1b[0m\n"}
[0.919326] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:5:1: F401 'launch.conditions.UnlessCondition' imported but unused\x1b[0m\n"}
[0.919384] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:12:90: W291 trailing whitespace\x1b[0m\n'}
[0.919440] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:15:14: W291 trailing whitespace\x1b[0m\n'}
[0.919495] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:23:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[0.919572] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:24:22: E225 missing whitespace around operator\x1b[0m\n'}
[0.919728] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:26:51: E225 missing whitespace around operator\x1b[0m\n'}
[0.919804] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:27:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.919901] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:28:5: F841 local variable 'use_sim_time' is assigned to but never used\x1b[0m\n"}
[0.920012] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:30:100: E501 line too long (115 > 99 characters)\x1b[0m\n'}
[0.920109] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:30:105: E231 missing whitespace after ','\x1b[0m\n"}
[0.920205] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:31:37: E128 continuation line under-indented for visual indent\x1b[0m\n'}
[0.920301] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:31:92: E261 at least two spaces before inline comment\x1b[0m\n'}
[0.920424] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:31:92: E262 inline comment should start with '# '\x1b[0m\n"}
[0.920539] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:34:100: E501 line too long (100 > 99 characters)\x1b[0m\n'}
[0.920653] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:48:89: E231 missing whitespace after ','\x1b[0m\n"}
[0.920726] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:48:96: E231 missing whitespace after ','\x1b[0m\n"}
[0.920793] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:55:56: E231 missing whitespace after ','\x1b[0m\n"}
[0.920860] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:61:56: E231 missing whitespace after ','\x1b[0m\n"}
[0.920933] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/show_turtle.launch.py:80:7: W292 no newline at end of file\x1b[0m\n'}
[0.921000] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:2:1: F401 'ament_index_python.packages.get_package_share_path' imported but unused\x1b[0m\n"}
[0.921066] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:5:1: F401 'launch.actions.DeclareLaunchArgument' imported but unused\x1b[0m\n"}
[0.921131] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:6:1: F401 'launch.conditions.IfCondition' imported but unused\x1b[0m\n"}
[0.921196] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:6:1: F401 'launch.conditions.UnlessCondition' imported but unused\x1b[0m\n"}
[0.921261] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:7:1: F401 'launch.substitutions.Command' imported but unused\x1b[0m\n"}
[0.921532] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:7:1: F401 'launch.substitutions.LaunchConfiguration' imported but unused\x1b[0m\n"}
[0.921596] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:10:1: F401 'launch_ros.parameter_descriptions.ParameterValue' imported but unused\x1b[0m\n"}
[0.921657] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:13:69: W291 trailing whitespace\x1b[0m\n'}
[0.921718] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:16:1: E302 expected 2 blank lines, found 0\x1b[0m\n'}
[0.921778] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:43:23: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[0.921839] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:43:25: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[0.921900] (turtle_brick) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:43:70: E231 missing whitespace after ','\x1b[0m\n"}
[0.921961] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:46:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.922021] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/run_turtle.launch.py:47:7: W292 no newline at end of file\x1b[0m\n'}
[0.922081] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/turtle_arena.launch.py:5:27: E271 multiple spaces after keyword\x1b[0m\n'}
[0.922142] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/turtle_arena.launch.py:10:61: W291 trailing whitespace\x1b[0m\n'}
[0.922217] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/turtle_arena.launch.py:12:54: W291 trailing whitespace\x1b[0m\n'}
[0.922277] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/turtle_arena.launch.py:15:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[0.922338] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/turtle_arena.launch.py:44:1: W293 blank line contains whitespace\x1b[0m\n'}
[0.922399] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/turtle_arena.launch.py:45:7: W292 no newline at end of file\x1b[0m\n'}
[0.922460] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   assert 1 == 0\x1b[0m\n'}
[0.922522] (turtle_brick) StdoutLine: {'line': b'----------------------------- Captured stdout call -----------------------------\n'}
[0.922586] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.922649] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/turtle_robot.py:114:58: E202 whitespace before ')'\n"}
[0.922710] (turtle_brick) StdoutLine: {'line': b'                                  msg.pose.orientation.z) )\n'}
[0.922771] (turtle_brick) StdoutLine: {'line': b'                                                         ^\n'}
[0.922832] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.922892] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:158:68: W291 trailing whitespace\n'}
[0.922951] (turtle_brick) StdoutLine: {'line': b'        self.odom_base_link.transform.translation.x = self.currentx \n'}
[0.923013] (turtle_brick) StdoutLine: {'line': b'                                                                   ^\n'}
[0.923074] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.923135] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:159:68: W291 trailing whitespace\n'}
[0.923196] (turtle_brick) StdoutLine: {'line': b'        self.odom_base_link.transform.translation.y = self.currenty \n'}
[0.923256] (turtle_brick) StdoutLine: {'line': b'                                                                   ^\n'}
[0.923318] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.923378] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:162:56: W291 trailing whitespace\n'}
[0.923439] (turtle_brick) StdoutLine: {'line': b'        self.joint_publisher_.publish(self.joint_state) \n'}
[0.923507] (turtle_brick) StdoutLine: {'line': b'                                                       ^\n'}
[0.923569] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.923629] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/turtle_robot.py:182:80: E202 whitespace before ')'\n"}
[0.923691] (turtle_brick) StdoutLine: {'line': b'                self.get_logger().info(\'stem angle: "%s"\' % (self.direction_ang ))\n'}
[0.923751] (turtle_brick) StdoutLine: {'line': b'                                                                               ^\n'}
[0.923812] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.923872] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:188:60: W291 trailing whitespace\n'}
[0.923933] (turtle_brick) StdoutLine: {'line': b'            if abs(self.tilt_ang - self.tilt_angf) >= 0.01:       \n'}
[0.923994] (turtle_brick) StdoutLine: {'line': b'                                                           ^\n'}
[0.924055] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.924115] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:198:1: E302 expected 2 blank lines, found 1\n'}
[0.924176] (turtle_brick) StdoutLine: {'line': b'def main(args=None):\n'}
[0.924237] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.924299] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.924359] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:200:16: E225 missing whitespace around operator\n'}
[0.924425] (turtle_brick) StdoutLine: {'line': b'    turtleRobot= Turtle_robot()\n'}
[0.924488] (turtle_brick) StdoutLine: {'line': b'               ^\n'}
[0.924550] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.924628] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:202:19: W291 trailing whitespace\n'}
[0.924697] (turtle_brick) StdoutLine: {'line': b'    rclpy.shutdown \n'}
[0.924761] (turtle_brick) StdoutLine: {'line': b'                  ^\n'}
[0.924823] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.924900] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:2:1: F401 'cmath.sqrt' imported but unused\n"}
[0.924967] (turtle_brick) StdoutLine: {'line': b'from cmath import sqrt\n'}
[0.925032] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.925098] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.925164] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:6:1: F401 'tf2_ros.static_transform_broadcaster.StaticTransformBroadcaster' imported but unused\n"}
[0.925230] (turtle_brick) StdoutLine: {'line': b'from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster\n'}
[0.925296] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.925362] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.925428] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:7:1: F401 'tf2_ros.TransformBroadcaster' imported but unused\n"}
[0.925493] (turtle_brick) StdoutLine: {'line': b'from tf2_ros import TransformBroadcaster\n'}
[0.925559] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.925624] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.925690] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:8:1: F401 'geometry_msgs.msg.TransformStamped' imported but unused\n"}
[0.925755] (turtle_brick) StdoutLine: {'line': b'from geometry_msgs.msg import TransformStamped, Pose, PoseStamped, Vector3\n'}
[0.925821] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.925884] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.925949] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:9:1: F401 'turtle_brick_interfaces.srv.Place' imported but unused\n"}
[0.926015] (turtle_brick) StdoutLine: {'line': b'from turtle_brick_interfaces.srv import Place, Drop\n'}
[0.926081] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.926146] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.926210] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:9:1: F401 'turtle_brick_interfaces.srv.Drop' imported but unused\n"}
[0.926276] (turtle_brick) StdoutLine: {'line': b'from turtle_brick_interfaces.srv import Place, Drop\n'}
[0.926341] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.926413] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.926478] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:11:42: W291 trailing whitespace\n'}
[0.926543] (turtle_brick) StdoutLine: {'line': b'from visualization_msgs.msg import Marker \n'}
[0.926608] (turtle_brick) StdoutLine: {'line': b'                                         ^\n'}
[0.926673] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.926738] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:12:12: W291 trailing whitespace\n'}
[0.926803] (turtle_brick) StdoutLine: {'line': b'import math \n'}
[0.926867] (turtle_brick) StdoutLine: {'line': b'           ^\n'}
[0.926946] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.927015] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:14:1: F401 '.quaternion.angle_axis_to_quaternion' imported but unused\n"}
[0.927085] (turtle_brick) StdoutLine: {'line': b'from .quaternion import angle_axis_to_quaternion\n'}
[0.927154] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.927223] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.927291] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:17:1: E302 expected 2 blank lines, found 1\n'}
[0.927360] (turtle_brick) StdoutLine: {'line': b'class State(Enum):\n'}
[0.927430] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.927498] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.927567] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:25:1: E302 expected 2 blank lines, found 1\n'}
[0.927641] (turtle_brick) StdoutLine: {'line': b'class Catcher(Node):\n'}
[0.927772] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.927847] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.927918] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:28:69: W291 trailing whitespace\n'}
[0.927990] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.928062] (turtle_brick) StdoutLine: {'line': b'    calculates if robot can catch placed brick in time or not\n'}
[0.928132] (turtle_brick) StdoutLine: {'line': b'    -If it can catch, robot travels to drop location, catches brick, \n'}
[0.928205] (turtle_brick) StdoutLine: {'line': b'        travels back to origin, and tilts brick off\n'}
[0.928287] (turtle_brick) StdoutLine: {'line': b'    -If the robot can\'t reach brick in time, the screen publishes "UNREACHABLE",\n'}
[0.928357] (turtle_brick) StdoutLine: {'line': b'        and lets brick fall to ground\n'}
[0.928427] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.928495] (turtle_brick) StdoutLine: {'line': b'        -robot_sub:continuous robot position\n'}
[0.928564] (turtle_brick) StdoutLine: {'line': b'        -drop_sub: gets placed brick position and sends if drop service is called \n'}
[0.928668] (turtle_brick) StdoutLine: {'line': b'        -catch_sub: gets True the brick is caught on the platform\n'}
[0.928743] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.928814] (turtle_brick) StdoutLine: {'line': b'        -goal_pose: send pose to turtle robot\n'}
[0.928903] (turtle_brick) StdoutLine: {'line': b'        -tilt: send tilt angle to platform on turtle robot\n'}
[0.928974] (turtle_brick) StdoutLine: {'line': b'        -text marker: publishes "UNREACHABLE" if robot can\'t reach in time\n'}
[0.929042] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.929111] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.929178] (turtle_brick) StdoutLine: {'line': b'                                                            ^\n'}
[0.929245] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.929313] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:34:82: W291 trailing whitespace\n'}
[0.929380] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.929448] (turtle_brick) StdoutLine: {'line': b'    calculates if robot can catch placed brick in time or not\n'}
[0.929516] (turtle_brick) StdoutLine: {'line': b'    -If it can catch, robot travels to drop location, catches brick, \n'}
[0.929583] (turtle_brick) StdoutLine: {'line': b'        travels back to origin, and tilts brick off\n'}
[0.929651] (turtle_brick) StdoutLine: {'line': b'    -If the robot can\'t reach brick in time, the screen publishes "UNREACHABLE",\n'}
[0.929725] (turtle_brick) StdoutLine: {'line': b'        and lets brick fall to ground\n'}
[0.929793] (turtle_brick) StdoutLine: {'line': b'    SUBSCRIPTIONS:\n'}
[0.929861] (turtle_brick) StdoutLine: {'line': b'        -robot_sub:continuous robot position\n'}
[0.929941] (turtle_brick) StdoutLine: {'line': b'        -drop_sub: gets placed brick position and sends if drop service is called \n'}
[0.930005] (turtle_brick) StdoutLine: {'line': b'        -catch_sub: gets True the brick is caught on the platform\n'}
[0.930069] (turtle_brick) StdoutLine: {'line': b'    PUBLISHERS:\n'}
[0.930132] (turtle_brick) StdoutLine: {'line': b'        -goal_pose: send pose to turtle robot\n'}
[0.930196] (turtle_brick) StdoutLine: {'line': b'        -tilt: send tilt angle to platform on turtle robot\n'}
[0.930263] (turtle_brick) StdoutLine: {'line': b'        -text marker: publishes "UNREACHABLE" if robot can\'t reach in time\n'}
[0.930336] (turtle_brick) StdoutLine: {'line': b'    """\n'}
[0.930397] (turtle_brick) StdoutLine: {'line': b'       \n'}
[0.930462] (turtle_brick) StdoutLine: {'line': b'                                                             \n'}
[0.930526] (turtle_brick) StdoutLine: {'line': b'           ^\n'}
[0.930586] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.930646] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:44:9: E265 block comment should start with '# '\n"}
[0.930706] (turtle_brick) StdoutLine: {'line': b'        #params\n'}
[0.930765] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.930824] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.930906] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:45:33: W291 trailing whitespace\n'}
[0.931015] (turtle_brick) StdoutLine: {'line': b'        self.declare_parameters( \n'}
[0.931143] (turtle_brick) StdoutLine: {'line': b'                                ^\n'}
[0.931229] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.931342] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:50:32: E231 missing whitespace after ','\n"}
[0.931504] (turtle_brick) StdoutLine: {'line': b"                ('max_velocity',3.0),\n"}
[0.931632] (turtle_brick) StdoutLine: {'line': b'                               ^\n'}
[0.931746] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.931868] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:51:27: E231 missing whitespace after ','\n"}
[0.931991] (turtle_brick) StdoutLine: {'line': b"                ('gravity',9.8)\n"}
[0.932111] (turtle_brick) StdoutLine: {'line': b'                          ^\n'}
[0.932237] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.932383] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:58:9: E265 block comment should start with '# '\n"}
[0.932516] (turtle_brick) StdoutLine: {'line': b'        #variables\n'}
[0.932660] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.932774] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.932884] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:61:9: E265 block comment should start with '# '\n"}
[0.932996] (turtle_brick) StdoutLine: {'line': b'        #state\n'}
[0.933107] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.933218] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.933328] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:63:9: E265 block comment should start with '# '\n"}
[0.933439] (turtle_brick) StdoutLine: {'line': b'        #subscritions\n'}
[0.933550] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.933662] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.933772] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:64:55: E231 missing whitespace after ','\n"}
[0.933884] (turtle_brick) StdoutLine: {'line': b"        self.robot_sub = self.create_subscription(Pose,'/robot',self.robot_callback,10)\n"}
[0.933996] (turtle_brick) StdoutLine: {'line': b'                                                      ^\n'}
[0.934108] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.934229] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:64:64: E231 missing whitespace after ','\n"}
[0.934340] (turtle_brick) StdoutLine: {'line': b"        self.robot_sub = self.create_subscription(Pose,'/robot',self.robot_callback,10)\n"}
[0.934452] (turtle_brick) StdoutLine: {'line': b'                                                               ^\n'}
[0.934564] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.934675] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:64:84: E231 missing whitespace after ','\n"}
[0.934786] (turtle_brick) StdoutLine: {'line': b"        self.robot_sub = self.create_subscription(Pose,'/robot',self.robot_callback,10)\n"}
[0.934910] (turtle_brick) StdoutLine: {'line': b'                                                                                   ^\n'}
[0.935057] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.935218] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:65:57: E231 missing whitespace after ','\n"}
[0.935391] (turtle_brick) StdoutLine: {'line': b"        self.drop_sub = self.create_subscription(Vector3,'/drop', self.drop_callback,10)\n"}
[0.935529] (turtle_brick) StdoutLine: {'line': b'                                                        ^\n'}
[0.935681] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.935796] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:65:85: E231 missing whitespace after ','\n"}
[0.935867] (turtle_brick) StdoutLine: {'line': b"        self.drop_sub = self.create_subscription(Vector3,'/drop', self.drop_callback,10)\n"}
[0.935951] (turtle_brick) StdoutLine: {'line': b'                                                                                    ^\n'}
[0.936021] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.936090] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:66:55: E231 missing whitespace after ','\n"}
[0.936158] (turtle_brick) StdoutLine: {'line': b"        self.catch_sub = self.create_subscription(Bool,'/catch', self.catch_callback,10)\n"}
[0.936226] (turtle_brick) StdoutLine: {'line': b'                                                      ^\n'}
[0.936295] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.936362] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:66:85: E231 missing whitespace after ','\n"}
[0.936430] (turtle_brick) StdoutLine: {'line': b"        self.catch_sub = self.create_subscription(Bool,'/catch', self.catch_callback,10)\n"}
[0.936498] (turtle_brick) StdoutLine: {'line': b'                                                                                    ^\n'}
[0.936580] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.936669] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:67:9: E265 block comment should start with '# '\n"}
[0.936738] (turtle_brick) StdoutLine: {'line': b'        #publisher\n'}
[0.936805] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.936871] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.936937] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:68:22: E225 missing whitespace around operator\n'}
[0.937004] (turtle_brick) StdoutLine: {'line': b"        self.goal_pub= self.create_publisher(PoseStamped,'/goal_pose',10)\n"}
[0.937070] (turtle_brick) StdoutLine: {'line': b'                     ^\n'}
[0.937136] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.937202] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:68:57: E231 missing whitespace after ','\n"}
[0.937269] (turtle_brick) StdoutLine: {'line': b"        self.goal_pub= self.create_publisher(PoseStamped,'/goal_pose',10)\n"}
[0.937336] (turtle_brick) StdoutLine: {'line': b'                                                        ^\n'}
[0.937401] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.937479] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:68:70: E231 missing whitespace after ','\n"}
[0.937542] (turtle_brick) StdoutLine: {'line': b"        self.goal_pub= self.create_publisher(PoseStamped,'/goal_pose',10)\n"}
[0.937619] (turtle_brick) StdoutLine: {'line': b'                                                                     ^\n'}
[0.937687] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.937750] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:69:22: E225 missing whitespace around operator\n'}
[0.937813] (turtle_brick) StdoutLine: {'line': b"        self.tilt_pub= self.create_publisher(Tilt,'/tilt',10)\n"}
[0.937876] (turtle_brick) StdoutLine: {'line': b'                     ^\n'}
[0.937938] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.938000] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:69:50: E231 missing whitespace after ','\n"}
[0.938069] (turtle_brick) StdoutLine: {'line': b"        self.tilt_pub= self.create_publisher(Tilt,'/tilt',10)\n"}
[0.938132] (turtle_brick) StdoutLine: {'line': b'                                                 ^\n'}
[0.938195] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.938257] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:69:58: E231 missing whitespace after ','\n"}
[0.938320] (turtle_brick) StdoutLine: {'line': b"        self.tilt_pub= self.create_publisher(Tilt,'/tilt',10)\n"}
[0.938382] (turtle_brick) StdoutLine: {'line': b'                                                         ^\n'}
[0.938443] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.938505] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:70:55: E231 missing whitespace after ','\n"}
[0.938567] (turtle_brick) StdoutLine: {'line': b"        self.marker_pub = self.create_publisher(Marker,'/marker',10)\n"}
[0.938630] (turtle_brick) StdoutLine: {'line': b'                                                      ^\n'}
[0.938692] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.938754] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:70:65: E231 missing whitespace after ','\n"}
[0.938817] (turtle_brick) StdoutLine: {'line': b"        self.marker_pub = self.create_publisher(Marker,'/marker',10)\n"}
[0.938879] (turtle_brick) StdoutLine: {'line': b'                                                                ^\n'}
[0.938942] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.939003] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:71:9: E265 block comment should start with '# '\n"}
[0.939066] (turtle_brick) StdoutLine: {'line': b'        #pose and posestamp and tilt\n'}
[0.939128] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.939190] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.939252] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:73:1: W293 blank line contains whitespace\n'}
[0.939314] (turtle_brick) StdoutLine: {'line': b'    \n'}
[0.939376] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.939437] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.939498] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:74:9: E265 block comment should start with '# '\n"}
[0.939560] (turtle_brick) StdoutLine: {'line': b'        #the text marker\n'}
[0.939623] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.939685] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.939748] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:97:1: W293 blank line contains whitespace\n'}
[0.939810] (turtle_brick) StdoutLine: {'line': b'    \n'}
[0.939872] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.939946] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.940006] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:98:5: E303 too many blank lines (3)\n'}
[0.940065] (turtle_brick) StdoutLine: {'line': b'    def robot_callback(self,msg):\n'}
[0.940125] (turtle_brick) StdoutLine: {'line': b'    ^\n'}
[0.940184] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.940243] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:98:28: E231 missing whitespace after ','\n"}
[0.940304] (turtle_brick) StdoutLine: {'line': b'    def robot_callback(self,msg):\n'}
[0.940364] (turtle_brick) StdoutLine: {'line': b'                           ^\n'}
[0.940423] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.940483] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:102:100: E501 line too long (100 > 99 characters)\n'}
[0.940553] (turtle_brick) StdoutLine: {'line': b'        if self.state == State.TILT and abs(self.platformx) <= 0.05 and abs(self.platformy) <= 0.05:\n'}
[0.940629] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.940697] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.940758] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:108:1: W293 blank line contains whitespace\n'}
[0.940819] (turtle_brick) StdoutLine: {'line': b'    \n'}
[0.940879] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.940939] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.940998] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:109:28: E231 missing whitespace after ','\n"}
[0.941058] (turtle_brick) StdoutLine: {'line': b'    def catch_callback(self,msg):\n'}
[0.941118] (turtle_brick) StdoutLine: {'line': b'                           ^\n'}
[0.941178] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.941239] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:119:5: E303 too many blank lines (2)\n'}
[0.941300] (turtle_brick) StdoutLine: {'line': b'    def drop_callback(self,msg):\n'}
[0.941360] (turtle_brick) StdoutLine: {'line': b'    ^\n'}
[0.941419] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.941478] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:119:27: E231 missing whitespace after ','\n"}
[0.941538] (turtle_brick) StdoutLine: {'line': b'    def drop_callback(self,msg):\n'}
[0.941598] (turtle_brick) StdoutLine: {'line': b'                          ^\n'}
[0.941658] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.941718] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:124:40: E225 missing whitespace around operator\n'}
[0.941778] (turtle_brick) StdoutLine: {'line': b'        if self.brick_pose.position.z >self.height:\n'}
[0.941839] (turtle_brick) StdoutLine: {'line': b'                                       ^\n'}
[0.941898] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.941957] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:126:13: E265 block comment should start with '# '\n"}
[0.942019] (turtle_brick) StdoutLine: {'line': b'            #calc time takes robot to move to x,y position from current position in max velocity speed (3.0 m/s) to 0.3 radius of the platform\n'}
[0.942080] (turtle_brick) StdoutLine: {'line': b'            ^\n'}
[0.942141] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.942200] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:126:100: E501 line too long (142 > 99 characters)\n'}
[0.942261] (turtle_brick) StdoutLine: {'line': b'            #calc time takes robot to move to x,y position from current position in max velocity speed (3.0 m/s) to 0.3 radius of the platform\n'}
[0.942323] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.942383] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.942442] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:127:100: E501 line too long (155 > 99 characters)\n'}
[0.942502] (turtle_brick) StdoutLine: {'line': b'            timerobo = math.sqrt((abs(self.brick_pose.position.x-self.platformx)-0.3)**2+(abs(self.brick_pose.position.y-self.platformy)-0.3)**2)/self.vmax\n'}
[0.942563] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.942623] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.942683] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:128:28: E225 missing whitespace around operator\n'}
[0.942744] (turtle_brick) StdoutLine: {'line': b'            if timerobo+1.0<=timefall: #1.0 is to give some time for message to be revieved and acted upon\n'}
[0.942807] (turtle_brick) StdoutLine: {'line': b'                           ^\n'}
[0.942869] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.942929] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:128:39: E261 at least two spaces before inline comment\n'}
[0.943007] (turtle_brick) StdoutLine: {'line': b'            if timerobo+1.0<=timefall: #1.0 is to give some time for message to be revieved and acted upon\n'}
[0.943071] (turtle_brick) StdoutLine: {'line': b'                                      ^\n'}
[0.943133] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.943194] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:128:40: E262 inline comment should start with '# '\n"}
[0.943256] (turtle_brick) StdoutLine: {'line': b'            if timerobo+1.0<=timefall: #1.0 is to give some time for message to be revieved and acted upon\n'}
[0.943317] (turtle_brick) StdoutLine: {'line': b'                                       ^\n'}
[0.943378] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.943440] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:128:100: E501 line too long (106 > 99 characters)\n'}
[0.943512] (turtle_brick) StdoutLine: {'line': b'            if timerobo+1.0<=timefall: #1.0 is to give some time for message to be revieved and acted upon\n'}
[0.943574] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.943637] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.943789] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:138:1: W293 blank line contains whitespace\n'}
[0.943865] (turtle_brick) StdoutLine: {'line': b'        \n'}
[0.943945] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.944009] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.944074] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:139:1: W293 blank line contains whitespace\n'}
[0.944139] (turtle_brick) StdoutLine: {'line': b'        \n'}
[0.944203] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.944266] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.944330] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:140:1: W293 blank line contains whitespace\n'}
[0.944407] (turtle_brick) StdoutLine: {'line': b'        \n'}
[0.944481] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.944540] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.944598] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:143:1: E303 too many blank lines (6)\n'}
[0.944680] (turtle_brick) StdoutLine: {'line': b'def catcher_entry(args=None):\n'}
[0.944742] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.944801] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.944859] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:147:21: W292 no newline at end of file\n'}
[0.944919] (turtle_brick) StdoutLine: {'line': b'    rclpy.shutdown()                    ^\n'}
[0.944978] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.945037] (turtle_brick) StderrLine: {'line': b'\x1b[33m=============================== warnings summary ===============================\x1b[0m\n'}
[0.945114] (turtle_brick) StderrLine: {'line': b'test/test_flake8.py::test_flake8\n'}
[0.945176] (turtle_brick) StderrLine: {'line': b'test/test_flake8.py::test_flake8\n'}
[0.945236] (turtle_brick) StderrLine: {'line': b'  Warning: SelectableGroups dict interface is deprecated. Use select.\n'}
[0.945295] (turtle_brick) StderrLine: {'line': b'\n'}
[0.945353] (turtle_brick) StderrLine: {'line': b'-- Docs: https://docs.pytest.org/en/stable/warnings.html\n'}
[0.945412] (turtle_brick) StdoutLine: {'line': b'./test/math_test.py:4:1: W293 blank line contains whitespace\n'}
[0.945471] (turtle_brick) StdoutLine: {'line': b'        ^\n'}
[0.945530] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.945588] (turtle_brick) StdoutLine: {'line': b'./test/math_test.py:4:9: W292 no newline at end of file\n'}
[0.945647] (turtle_brick) StdoutLine: {'line': b'                ^\n'}
[0.945706] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.945764] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:1:1: F401 'ament_copyright.main.main' imported but unused\n"}
[0.945823] (turtle_brick) StdoutLine: {'line': b'from ament_copyright.main import main\n'}
[0.945899] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.945967] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.946043] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:2:1: F401 'pytest' imported but unused\n"}
[0.946113] (turtle_brick) StdoutLine: {'line': b'import pytest\n'}
[0.946181] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.946250] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.946318] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:3:1: F401 'launch' imported but unused\n"}
[0.946386] (turtle_brick) StdoutLine: {'line': b'import launch\n'}
[0.946455] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.946523] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.946591] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:4:1: F401 'launch_pytest' imported but unused\n"}
[0.946660] (turtle_brick) StdoutLine: {'line': b'import launch_pytest\n'}
[0.946728] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.946795] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.946864] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:5:1: F401 'sys' imported but unused\n"}
[0.946944] (turtle_brick) StdoutLine: {'line': b'import sys\n'}
[0.947009] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.947074] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.947139] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:6:1: F401 'launch_ros' imported but unused\n"}
[0.947204] (turtle_brick) StdoutLine: {'line': b'import launch_ros\n'}
[0.947269] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.947334] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.947401] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:7:1: F401 'pathlib.Path' imported but unused\n"}
[0.947469] (turtle_brick) StdoutLine: {'line': b'from pathlib import Path\n'}
[0.947537] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.947605] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.947671] (turtle_brick) StdoutLine: {'line': b"./test/brick.test.py:8:1: E265 block comment should start with '# '\n"}
[0.947741] (turtle_brick) StdoutLine: {'line': b'#found this example here https://github.com/ros2/launch/blob/humble/launch_pytest/test/launch_pytest/examples/check_node_msgs.py\n'}
[0.947811] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.947877] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.947944] (turtle_brick) StdoutLine: {'line': b'./test/brick.test.py:8:100: E501 line too long (128 > 99 characters)\n'}
[0.948011] (turtle_brick) StdoutLine: {'line': b'#found this example here https://github.com/ros2/launch/blob/humble/launch_pytest/test/launch_pytest/examples/check_node_msgs.py\n'}
[0.948080] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.948150] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.948290] (turtle_brick) StdoutLine: {'line': b'./test/brick.test.py:21:9: W292 no newline at end of file\n'}
[0.948404] (turtle_brick) StdoutLine: {'line': b'#     ])        ^\n'}
[0.948515] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.948640] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:1:1: F401 'ament_index_python.packages.get_package_share_path' imported but unused\n"}
[0.948722] (turtle_brick) StdoutLine: {'line': b'from ament_index_python.packages import get_package_share_path,get_package_share_directory\n'}
[0.948789] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.948855] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.948936] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:1:63: E231 missing whitespace after ','\n"}
[0.948997] (turtle_brick) StdoutLine: {'line': b'from ament_index_python.packages import get_package_share_path,get_package_share_directory\n'}
[0.949060] (turtle_brick) StdoutLine: {'line': b'                                                              ^\n'}
[0.949122] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.949183] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:5:1: F401 'launch.conditions.UnlessCondition' imported but unused\n"}
[0.949258] (turtle_brick) StdoutLine: {'line': b'from launch.conditions import IfCondition, UnlessCondition\n'}
[0.949320] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.949387] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.949447] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:12:90: W291 trailing whitespace\n'}
[0.949508] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.949569] (turtle_brick) StdoutLine: {'line': b'took bases from https://github.com/ros/urdf_tutorial/blob/ros2/launch/display.launch.py\n'}
[0.949630] (turtle_brick) StdoutLine: {'line': b'launches the rviz, robot publisher, and choosen joint state publisher nodes and takes the \n'}
[0.949691] (turtle_brick) StdoutLine: {'line': b'turtle_robot.urdf.xacro file from the urdf folder\n'}
[0.949751] (turtle_brick) StdoutLine: {'line': b'LAUNCH ARGUMENTS:\n'}
[0.949811] (turtle_brick) StdoutLine: {'line': b'    -use_jsp: \n'}
[0.949871] (turtle_brick) StdoutLine: {'line': b'        default: \'"gui"\'\n'}
[0.949951] (turtle_brick) StdoutLine: {'line': b'        arguments: [\'"gui"\', \'"jsp"\', \'"none"\']\n'}
[0.950015] (turtle_brick) StdoutLine: {'line': b'            \'"gui"\': launches with joint_state_publisher_gui_node\n'}
[0.950080] (turtle_brick) StdoutLine: {'line': b'            \'"jsp"\': launches with joint_state_publisher_node\n'}
[0.950144] (turtle_brick) StdoutLine: {'line': b'            \'"none"\': does not use either joint state publisher\n'}
[0.950208] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.950271] (turtle_brick) StdoutLine: {'line': b'   \n'}
[0.950334] (turtle_brick) StdoutLine: {'line': b'                                                                                     ^\n'}
[0.950398] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.950461] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:15:14: W291 trailing whitespace\n'}
[0.950524] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.950587] (turtle_brick) StdoutLine: {'line': b'took bases from https://github.com/ros/urdf_tutorial/blob/ros2/launch/display.launch.py\n'}
[0.950651] (turtle_brick) StdoutLine: {'line': b'launches the rviz, robot publisher, and choosen joint state publisher nodes and takes the \n'}
[0.950715] (turtle_brick) StdoutLine: {'line': b'turtle_robot.urdf.xacro file from the urdf folder\n'}
[0.950778] (turtle_brick) StdoutLine: {'line': b'LAUNCH ARGUMENTS:\n'}
[0.950841] (turtle_brick) StdoutLine: {'line': b'    -use_jsp: \n'}
[0.950916] (turtle_brick) StdoutLine: {'line': b'        default: \'"gui"\'\n'}
[0.950975] (turtle_brick) StdoutLine: {'line': b'        arguments: [\'"gui"\', \'"jsp"\', \'"none"\']\n'}
[0.951033] (turtle_brick) StdoutLine: {'line': b'            \'"gui"\': launches with joint_state_publisher_gui_node\n'}
[0.951091] (turtle_brick) StdoutLine: {'line': b'            \'"jsp"\': launches with joint_state_publisher_node\n'}
[0.951161] (turtle_brick) StdoutLine: {'line': b'            \'"none"\': does not use either joint state publisher\n'}
[0.951220] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.951278] (turtle_brick) StdoutLine: {'line': b'   \n'}
[0.951336] (turtle_brick) StdoutLine: {'line': b'         ^\n'}
[0.951394] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.951553] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:23:1: E302 expected 2 blank lines, found 1\n'}
[0.951709] (turtle_brick) StdoutLine: {'line': b'def generate_launch_description():\n'}
[0.951857] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.951929] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.951993] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:24:22: E225 missing whitespace around operator\n'}
[0.952065] (turtle_brick) StdoutLine: {'line': b"    turtle_brick_path= 'src/turtle_brick'\n"}
[0.952129] (turtle_brick) StdoutLine: {'line': b'                     ^\n'}
[0.952193] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.952257] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:26:51: E225 missing whitespace around operator\n'}
[0.952320] (turtle_brick) StdoutLine: {'line': b"    default_rviz_config_path = turtle_brick_path +'/config/turtle_urdf.rviz'\n"}
[0.952384] (turtle_brick) StdoutLine: {'line': b'                                                  ^\n'}
[0.952454] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.952517] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:27:1: W293 blank line contains whitespace\n'}
[0.952581] (turtle_brick) StdoutLine: {'line': b'    \n'}
[0.952666] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.952732] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.952794] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:28:5: F841 local variable 'use_sim_time' is assigned to but never used\n"}
[0.952859] (turtle_brick) StdoutLine: {'line': b"    use_sim_time = LaunchConfiguration('use_sim_time', default='false')\n"}
[0.952922] (turtle_brick) StdoutLine: {'line': b'    ^\n'}
[0.952986] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.953047] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:30:100: E501 line too long (115 > 99 characters)\n'}
[0.953110] (turtle_brick) StdoutLine: {'line': b'    use_jsp_arg = DeclareLaunchArgument(name=\'use_jsp\', default_value=\'"gui"\', choices=[\'"gui"\', \'"jsp"\',\'"none"\'],\n'}
[0.953173] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.953237] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.953300] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:30:105: E231 missing whitespace after ','\n"}
[0.953363] (turtle_brick) StdoutLine: {'line': b'    use_jsp_arg = DeclareLaunchArgument(name=\'use_jsp\', default_value=\'"gui"\', choices=[\'"gui"\', \'"jsp"\',\'"none"\'],\n'}
[0.953425] (turtle_brick) StdoutLine: {'line': b'                                                                                                        ^\n'}
[0.953487] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.953548] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:31:37: E128 continuation line under-indented for visual indent\n'}
[0.953611] (turtle_brick) StdoutLine: {'line': b"                                    description='Flag to enable joint_state_publisher_gui')#change\n"}
[0.953685] (turtle_brick) StdoutLine: {'line': b'                                    ^\n'}
[0.953745] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.953805] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:31:92: E261 at least two spaces before inline comment\n'}
[0.953866] (turtle_brick) StdoutLine: {'line': b"                                    description='Flag to enable joint_state_publisher_gui')#change\n"}
[0.953928] (turtle_brick) StdoutLine: {'line': b'                                                                                           ^\n'}
[0.953988] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.954048] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:31:92: E262 inline comment should start with '# '\n"}
[0.954110] (turtle_brick) StdoutLine: {'line': b"                                    description='Flag to enable joint_state_publisher_gui')#change\n"}
[0.954170] (turtle_brick) StdoutLine: {'line': b'                                                                                           ^\n'}
[0.954237] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.954297] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:34:100: E501 line too long (100 > 99 characters)\n'}
[0.954357] (turtle_brick) StdoutLine: {'line': b"    rviz_arg = DeclareLaunchArgument(name='rvizconfig', default_value=str(default_rviz_config_path),\n"}
[0.954418] (turtle_brick) StdoutLine: {'line': b'                                                                                                   ^\n'}
[0.954479] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.954538] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:48:89: E231 missing whitespace after ','\n"}
[0.954598] (turtle_brick) StdoutLine: {'line': b"        parameters=[{'robot_description': robot_description, 'publish_frequency': 100.0},config,]\n"}
[0.954658] (turtle_brick) StdoutLine: {'line': b'                                                                                        ^\n'}
[0.954724] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.954783] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:48:96: E231 missing whitespace after ','\n"}
[0.954844] (turtle_brick) StdoutLine: {'line': b"        parameters=[{'robot_description': robot_description, 'publish_frequency': 100.0},config,]\n"}
[0.954904] (turtle_brick) StdoutLine: {'line': b'                                                                                               ^\n'}
[0.954963] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.955023] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:55:56: E231 missing whitespace after ','\n"}
[0.955083] (turtle_brick) StdoutLine: {'line': b'        condition=IfCondition(PythonExpression([use_jsp,"==\'jsp\'"]))\n'}
[0.955144] (turtle_brick) StdoutLine: {'line': b'                                                       ^\n'}
[0.955204] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.955264] (turtle_brick) StdoutLine: {'line': b"./launch/show_turtle.launch.py:61:56: E231 missing whitespace after ','\n"}
[0.955325] (turtle_brick) StdoutLine: {'line': b'        condition=IfCondition(PythonExpression([use_jsp,"==\'gui\'"]))\n'}
[0.955386] (turtle_brick) StdoutLine: {'line': b'                                                       ^\n'}
[0.955447] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.955510] (turtle_brick) StdoutLine: {'line': b'./launch/show_turtle.launch.py:80:7: W292 no newline at end of file\n'}
[0.955570] (turtle_brick) StdoutLine: {'line': b'    ])      ^\n'}
[0.955629] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.955689] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:2:1: F401 'ament_index_python.packages.get_package_share_path' imported but unused\n"}
[0.955749] (turtle_brick) StdoutLine: {'line': b'from ament_index_python.packages import get_package_share_path, get_package_share_directory\n'}
[0.955809] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.955868] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.955928] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:5:1: F401 'launch.actions.DeclareLaunchArgument' imported but unused\n"}
[0.955988] (turtle_brick) StdoutLine: {'line': b'from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription\n'}
[0.956049] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.956108] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.956168] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:6:1: F401 'launch.conditions.IfCondition' imported but unused\n"}
[0.956228] (turtle_brick) StdoutLine: {'line': b'from launch.conditions import IfCondition, UnlessCondition\n'}
[0.956288] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.956348] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.956407] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:6:1: F401 'launch.conditions.UnlessCondition' imported but unused\n"}
[0.956473] (turtle_brick) StdoutLine: {'line': b'from launch.conditions import IfCondition, UnlessCondition\n'}
[0.956533] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.956592] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.956669] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:7:1: F401 'launch.substitutions.Command' imported but unused\n"}
[0.956732] (turtle_brick) StdoutLine: {'line': b'from launch.substitutions import Command, LaunchConfiguration, PathJoinSubstitution\n'}
[0.956800] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.956861] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.956935] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:7:1: F401 'launch.substitutions.LaunchConfiguration' imported but unused\n"}
[0.956998] (turtle_brick) StdoutLine: {'line': b'from launch.substitutions import Command, LaunchConfiguration, PathJoinSubstitution\n'}
[0.957060] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.957124] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.957185] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:10:1: F401 'launch_ros.parameter_descriptions.ParameterValue' imported but unused\n"}
[0.957254] (turtle_brick) StdoutLine: {'line': b'from launch_ros.parameter_descriptions import ParameterValue\n'}
[0.957317] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.957378] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.957440] (turtle_brick) StdoutLine: {'line': b'./launch/run_turtle.launch.py:13:69: W291 trailing whitespace\n'}
[0.957502] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.957564] (turtle_brick) StdoutLine: {'line': b'launches turtlesim and turtle_robot node along with all the nodes in \n'}
[0.957626] (turtle_brick) StdoutLine: {'line': b'show_turtle launch file. Also connects yaml file to turtle_robot\n'}
[0.957688] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.957749] (turtle_brick) StdoutLine: {'line': b'   \n'}
[0.957811] (turtle_brick) StdoutLine: {'line': b'                                                                ^\n'}
[0.957873] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.957934] (turtle_brick) StdoutLine: {'line': b'./launch/run_turtle.launch.py:16:1: E302 expected 2 blank lines, found 0\n'}
[0.957996] (turtle_brick) StdoutLine: {'line': b'def generate_launch_description():\n'}
[0.958057] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.958119] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.958180] (turtle_brick) StdoutLine: {'line': b'./launch/run_turtle.launch.py:43:23: E251 unexpected spaces around keyword / parameter equals\n'}
[0.958243] (turtle_brick) StdoutLine: {'line': b"            remappings = [('/cmd_vel', '/turtlesim1/turtle1/cmd_vel'),],\n"}
[0.958305] (turtle_brick) StdoutLine: {'line': b'                      ^\n'}
[0.958367] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.958428] (turtle_brick) StdoutLine: {'line': b'./launch/run_turtle.launch.py:43:25: E251 unexpected spaces around keyword / parameter equals\n'}
[0.958493] (turtle_brick) StdoutLine: {'line': b"            remappings = [('/cmd_vel', '/turtlesim1/turtle1/cmd_vel'),],\n"}
[0.958554] (turtle_brick) StdoutLine: {'line': b'                        ^\n'}
[0.958617] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.958678] (turtle_brick) StdoutLine: {'line': b"./launch/run_turtle.launch.py:43:70: E231 missing whitespace after ','\n"}
[0.958741] (turtle_brick) StdoutLine: {'line': b"            remappings = [('/cmd_vel', '/turtlesim1/turtle1/cmd_vel'),],\n"}
[0.958811] (turtle_brick) StdoutLine: {'line': b'                                                                     ^\n'}
[0.958875] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.958933] (turtle_brick) StdoutLine: {'line': b'./launch/run_turtle.launch.py:46:1: W293 blank line contains whitespace\n'}
[0.958995] (turtle_brick) StdoutLine: {'line': b'        \n'}
[0.959057] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.959126] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.959187] (turtle_brick) StdoutLine: {'line': b'./launch/run_turtle.launch.py:47:7: W292 no newline at end of file\n'}
[0.959249] (turtle_brick) StdoutLine: {'line': b'    ])      ^\n'}
[0.959311] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.959372] (turtle_brick) StdoutLine: {'line': b'./launch/turtle_arena.launch.py:5:27: E271 multiple spaces after keyword\n'}
[0.959434] (turtle_brick) StdoutLine: {'line': b'from launch.actions import  IncludeLaunchDescription\n'}
[0.959496] (turtle_brick) StdoutLine: {'line': b'                          ^\n'}
[0.959558] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.959620] (turtle_brick) StdoutLine: {'line': b'./launch/turtle_arena.launch.py:10:61: W291 trailing whitespace\n'}
[0.959682] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.959746] (turtle_brick) StdoutLine: {'line': b'launches arena and catcher nodes along with all the nodes in \n'}
[0.959871] (turtle_brick) StdoutLine: {'line': b'show_turtle launch file.\n'}
[0.959940] (turtle_brick) StdoutLine: {'line': b'Also connects to yaml files to arena and catcher node \n'}
[0.960018] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.960079] (turtle_brick) StdoutLine: {'line': b'   \n'}
[0.960139] (turtle_brick) StdoutLine: {'line': b'                                                        ^\n'}
[0.960205] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.960264] (turtle_brick) StdoutLine: {'line': b'./launch/turtle_arena.launch.py:12:54: W291 trailing whitespace\n'}
[0.960324] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.960382] (turtle_brick) StdoutLine: {'line': b'launches arena and catcher nodes along with all the nodes in \n'}
[0.960442] (turtle_brick) StdoutLine: {'line': b'show_turtle launch file.\n'}
[0.960500] (turtle_brick) StdoutLine: {'line': b'Also connects to yaml files to arena and catcher node \n'}
[0.960559] (turtle_brick) StdoutLine: {'line': b'"""\n'}
[0.960651] (turtle_brick) StdoutLine: {'line': b'   \n'}
[0.960729] (turtle_brick) StdoutLine: {'line': b'                                                 ^\n'}
[0.960789] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.960849] (turtle_brick) StdoutLine: {'line': b'./launch/turtle_arena.launch.py:15:1: E302 expected 2 blank lines, found 1\n'}
[0.960910] (turtle_brick) StdoutLine: {'line': b'def generate_launch_description():\n'}
[0.960970] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.961027] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.961086] (turtle_brick) StdoutLine: {'line': b'./launch/turtle_arena.launch.py:44:1: W293 blank line contains whitespace\n'}
[0.961145] (turtle_brick) StdoutLine: {'line': b'        \n'}
[0.961204] (turtle_brick) StdoutLine: {'line': b'^\n'}
[0.961263] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.961321] (turtle_brick) StdoutLine: {'line': b'./launch/turtle_arena.launch.py:45:7: W292 no newline at end of file\n'}
[0.961380] (turtle_brick) StdoutLine: {'line': b'    ])      ^\n'}
[0.961438] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.961496] (turtle_brick) StdoutLine: {'line': b'1     E128 continuation line under-indented for visual indent\n'}
[0.961555] (turtle_brick) StdoutLine: {'line': b"2     E202 whitespace before ')'\n"}
[0.961614] (turtle_brick) StdoutLine: {'line': b'7     E225 missing whitespace around operator\n'}
[0.961672] (turtle_brick) StdoutLine: {'line': b"25    E231 missing whitespace after ','\n"}
[0.961730] (turtle_brick) StdoutLine: {'line': b'2     E251 unexpected spaces around keyword / parameter equals\n'}
[0.961788] (turtle_brick) StdoutLine: {'line': b'2     E261 at least two spaces before inline comment\n'}
[0.961846] (turtle_brick) StdoutLine: {'line': b"2     E262 inline comment should start with '# '\n"}
[0.961904] (turtle_brick) StdoutLine: {'line': b"9     E265 block comment should start with '# '\n"}
[0.961962] (turtle_brick) StdoutLine: {'line': b'1     E271 multiple spaces after keyword\n'}
[0.962021] (turtle_brick) StdoutLine: {'line': b'6     E302 expected 2 blank lines, found 0\n'}
[0.962079] (turtle_brick) StdoutLine: {'line': b'3     E303 too many blank lines (3)\n'}
[0.962138] (turtle_brick) StdoutLine: {'line': b'7     E501 line too long (115 > 99 characters)\n'}
[0.962196] (turtle_brick) StdoutLine: {'line': b"23    F401 'ament_index_python.packages.get_package_share_path' imported but unused\n"}
[0.962254] (turtle_brick) StdoutLine: {'line': b"1     F841 local variable 'use_sim_time' is assigned to but never used\n"}
[0.962313] (turtle_brick) StdoutLine: {'line': b'15    W291 trailing whitespace\n'}
[0.962371] (turtle_brick) StdoutLine: {'line': b'6     W292 no newline at end of file\n'}
[0.962429] (turtle_brick) StdoutLine: {'line': b'10    W293 blank line contains whitespace\n'}
[0.962486] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.962545] (turtle_brick) StdoutLine: {'line': b'13 files checked\n'}
[0.962603] (turtle_brick) StdoutLine: {'line': b'122 errors\n'}
[0.962661] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.962719] (turtle_brick) StdoutLine: {'line': b"'E'-type errors: 67\n"}
[0.962778] (turtle_brick) StdoutLine: {'line': b"'F'-type errors: 24\n"}
[0.962836] (turtle_brick) StdoutLine: {'line': b"'W'-type errors: 31\n"}
[0.962907] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.962968] (turtle_brick) StdoutLine: {'line': b'Checked files:\n'}
[0.963031] (turtle_brick) StdoutLine: {'line': b'\n'}
[0.963103] (turtle_brick) StdoutLine: {'line': b'* ./setup.py\n'}
[0.963166] (turtle_brick) StdoutLine: {'line': b'* ./turtle_brick/arena.py\n'}
[0.963228] (turtle_brick) StdoutLine: {'line': b'* ./turtle_brick/turtle_robot.py\n'}
[0.963290] (turtle_brick) StdoutLine: {'line': b'* ./turtle_brick/catcher.py\n'}
[0.963352] (turtle_brick) StdoutLine: {'line': b'* ./turtle_brick/__init__.py\n'}
[0.963415] (turtle_brick) StdoutLine: {'line': b'* ./test/math_test.py\n'}
[0.963477] (turtle_brick) StdoutLine: {'line': b'* ./test/test_flake8.py\n'}
[0.963539] (turtle_brick) StdoutLine: {'line': b'* ./test/test_copyright.py\n'}
[0.963601] (turtle_brick) StdoutLine: {'line': b'* ./test/test_pep257.py\n'}
[0.963663] (turtle_brick) StdoutLine: {'line': b'* ./test/brick.test.py\n'}
[0.963725] (turtle_brick) StdoutLine: {'line': b'* ./launch/show_turtle.launch.py\n'}
[0.963788] (turtle_brick) StdoutLine: {'line': b'* ./launch/run_turtle.launch.py\n'}
[0.963850] (turtle_brick) StdoutLine: {'line': b'* ./launch/turtle_arena.launch.py\n'}
[0.963924] (turtle_brick) StdoutLine: {'line': b'----------------------------- Captured stderr call -----------------------------\n'}
[0.963991] (turtle_brick) StdoutLine: {'line': b'option --max-complexity: please update from optparse string `type=` to argparse callable `type=` -- this will be an error in the future\n'}
[0.964052] (turtle_brick) StdoutLine: {'line': b'\x1b[31m\x1b[1m_________________________________ test_pep257 __________________________________\x1b[0m\n'}
[0.964118] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mtest/test_pep257.py\x1b[0m:23: in test_pep257\n'}
[0.964179] (turtle_brick) StdoutLine: {'line': b"    \x1b[94massert\x1b[39;49;00m rc == \x1b[94m0\x1b[39;49;00m, \x1b[33m'\x1b[39;49;00m\x1b[33mFound code style errors / warnings\x1b[39;49;00m\x1b[33m'\x1b[39;49;00m\n"}
[0.964238] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   AssertionError: Found code style errors / warnings\x1b[0m\n'}
[0.964319] (turtle_brick) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   assert 1 == 0\x1b[0m\n'}
[0.964396] (turtle_brick) StdoutLine: {'line': b'----------------------------- Captured stdout call -----------------------------\n'}
[0.964458] (turtle_brick) StdoutLine: {'line': b'checking ./launch/run_turtle.launch.py\n'}
[0.964526] (turtle_brick) StdoutLine: {'line': b'checking ./launch/show_turtle.launch.py\n'}
[0.964587] (turtle_brick) StdoutLine: {'line': b'checking ./launch/turtle_arena.launch.py\n'}
[0.964695] (turtle_brick) StdoutLine: {'line': b'checking ./setup.py\n'}
[0.964757] (turtle_brick) StdoutLine: {'line': b'checking ./test/brick.test.py\n'}
[0.964817] (turtle_brick) StdoutLine: {'line': b'checking ./test/math_test.py\n'}
[0.964876] (turtle_brick) StdoutLine: {'line': b'checking ./test/test_copyright.py\n'}
[0.964935] (turtle_brick) StdoutLine: {'line': b'checking ./test/test_flake8.py\n'}
[0.964995] (turtle_brick) StdoutLine: {'line': b'checking ./test/test_pep257.py\n'}
[0.965055] (turtle_brick) StdoutLine: {'line': b'checking ./turtle_brick/__init__.py\n'}
[0.965114] (turtle_brick) StdoutLine: {'line': b'checking ./turtle_brick/arena.py\n'}
[0.965173] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:16 in public class `BState`: D204: 1 blank line required after class docstring (found 0)\n'}
[0.965234] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:16 in public class `BState`: D205: 1 blank line required between summary line and description (found 0)\n'}
[0.965295] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:16 in public class `BState`: D208: Docstring is over-indented\n'}
[0.965355] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:16 in public class `BState`: D210: No whitespaces allowed surrounding docstring text\n'}
[0.965416] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:16 in public class `BState`: D213: Multi-line docstring summary should start at the second line\n'}
[0.965476] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:29 in public class `Arena`: D204: 1 blank line required after class docstring (found 0)\n'}
[0.965541] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/arena.py:29 in public class `Arena`: D205: 1 blank line required between summary line and description (found 0)\n'}
[0.965601] (turtle_brick) StdoutLine: {'line': b'checking ./turtle_brick/catcher.py\n'}
[0.965660] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:18 in public class `State`: D204: 1 blank line required after class docstring (found 0)\n'}
[0.965720] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:18 in public class `State`: D205: 1 blank line required between summary line and description (found 0)\n'}
[0.965779] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:18 in public class `State`: D208: Docstring is over-indented\n'}
[0.965839] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:18 in public class `State`: D210: No whitespaces allowed surrounding docstring text\n'}
[0.965899] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:18 in public class `State`: D213: Multi-line docstring summary should start at the second line\n'}
[0.965958] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:18 in public class `State`: D400: First line should end with a period (not 't')\n"}
[0.966018] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:18 in public class `State`: D415: First line should end with a period, question mark, or exclamation point (not 't')\n"}
[0.966078] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/catcher.py:26 in public class `Catcher`: D205: 1 blank line required between summary line and description (found 0)\n'}
[0.966137] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:26 in public class `Catcher`: D400: First line should end with a period (not 't')\n"}
[0.966196] (turtle_brick) StdoutLine: {'line': b"./turtle_brick/catcher.py:26 in public class `Catcher`: D415: First line should end with a period, question mark, or exclamation point (not 't')\n"}
[0.966255] (turtle_brick) StdoutLine: {'line': b'checking ./turtle_brick/turtle_robot.py\n'}
[0.966314] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:14 in public class `Turtle_robot`: D204: 1 blank line required after class docstring (found 0)\n'}
[0.966374] (turtle_brick) StdoutLine: {'line': b'./turtle_brick/turtle_robot.py:14 in public class `Turtle_robot`: D205: 1 blank line required between summary line and description (found 0)\n'}
[0.966434] (turtle_brick) StdoutLine: {'line': b'checking test/brick.test.py\n'}
[0.966493] (turtle_brick) StdoutLine: {'line': b'checking test/math_test.py\n'}
[0.966552] (turtle_brick) StdoutLine: {'line': b'checking test/test_copyright.py\n'}
[0.966611] (turtle_brick) StdoutLine: {'line': b'checking test/test_flake8.py\n'}
[0.966669] (turtle_brick) StdoutLine: {'line': b'checking test/test_pep257.py\n'}
[0.966728] (turtle_brick) StdoutLine: {'line': b'19 errors\n'}
[0.966787] (turtle_brick) StdoutLine: {'line': b'- generated xml file: /home/alyssa/homework2-alyssa225/build/turtle_brick/pytest.xml -\n'}
[0.966845] (turtle_brick) StdoutLine: {'line': b'=========================== short test summary info ============================\n'}
[0.966924] (turtle_brick) StdoutLine: {'line': b'FAILED test/test_flake8.py::test_flake8 - AssertionError: Found 122 code styl...\n'}
[0.966998] (turtle_brick) StdoutLine: {'line': b'FAILED test/test_pep257.py::test_pep257 - AssertionError: Found code style er...\n'}
[0.967077] (turtle_brick) StdoutLine: {'line': b'\x1b[31m============== \x1b[31m\x1b[1m2 failed\x1b[0m, \x1b[32m1 passed\x1b[0m, \x1b[33m1 skipped\x1b[0m, \x1b[33m2 warnings\x1b[0m\x1b[31m in 0.38s\x1b[0m\x1b[31m ==============\x1b[0m\n'}
[0.992164] (turtle_brick) CommandEnded: {'returncode': 1}
[0.992793] (turtle_brick) TestFailure: {'identifier': 'turtle_brick'}
[0.992865] (turtle_brick) JobEnded: {'identifier': 'turtle_brick', 'rc': 0}
[0.993649] (-) EventReactorShutdown: {}
